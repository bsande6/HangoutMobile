{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useCurrentPageRows } from '../../utils/useCurrentPageRows';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\"; // Uses binary search to avoid looping through all possible positions\n\nexport function getIndexFromScroll(offset, positions) {\n  let sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? getIndexFromScroll(offset, positions, sliceStart, pivot) : getIndexFromScroll(offset, positions, pivot + 1, sliceEnd);\n}\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range2;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useCurrentPageRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const firstRowIndex = getIndexFromScroll(top, rowsMeta.positions);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top + rootRef.current.clientHeight, rowsMeta.positions);\n    const firstColumnIndex = getIndexFromScroll(left, columnPositions);\n    const lastColumnIndex = getIndexFromScroll(left + containerWidth, columnPositions);\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, GridEvents.resize, handleResize);\n\n  const getRenderableIndexes = _ref2 => {\n    let {\n      firstIndex,\n      lastIndex,\n      buffer,\n      minFirstIndex,\n      maxLastIndex\n    } = _ref2;\n    return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n  };\n\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    var _currentPage$range;\n\n    const [firstRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: (_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.lastRowIndex,\n      buffer: rootProps.rowBuffer\n    });\n    const [firstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex, onRenderZonePositioning, renderZoneMaxColumnIndex, renderZoneMinColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext, updateRenderZonePosition]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    prevRenderContext.current = initialRenderContext;\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent(GridEvents.rowsScroll, params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const rowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const columnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const shouldSetState = rowsScrolledSincePreviousRender >= rootProps.rowThreshold || columnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent(GridEvents.rowsScroll, {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    });\n\n    if (shouldSetState) {\n      updateRenderContext(nextRenderContext);\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext\n    };\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth\n    } = params;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const [firstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const renderedRows = currentPage.rows.slice(firstRowToRender, lastRowToRender);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const targetRowHeight = apiRef.current.unstable_getRowHeight(id);\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: targetRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + nextRenderContext.firstRowIndex + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent(GridEvents.virtualScrollerContentSizeChange);\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: function () {\n      let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function () {\n      let {\n        style = {}\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","useForkRef","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useCurrentPageRows","GridEvents","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","jsx","_jsx","getIndexFromScroll","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","useGridVirtualScroller","props","_currentPage$range2","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerWidth","setContainerWidth","prevTotalWidth","computeRenderContext","useCallback","firstRowIndex","lastRowIndex","rows","firstColumnIndex","lastColumnIndex","current","autoHeight","clientHeight","useEffect","style","transform","scrollLeft","scrollTop","clientWidth","currentPageTotalHeight","handleResize","resize","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","updateRenderZonePosition","nextRenderContext","_currentPage$range","firstRowToRender","range","rowBuffer","firstColumnToRender","columnBuffer","state","updateRenderContext","initialRenderContext","params","publishEvent","rowsScroll","handleScroll","event","currentTarget","rowsScrolledSincePreviousRender","abs","columnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","getRows","minFirstColumn","maxLastColumn","availableSpace","lastRowToRender","lastColumnToRender","renderedRows","slice","renderedColumns","i","_rootProps$components","id","model","lastVisibleRowIndex","targetRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","getRowParams","push","components","Row","row","rowId","selected","index","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","height","max","shouldExtendContent","size","width","minHeight","virtualScrollerContentSizeChange","rootStyle","overflowX","getRenderContext","unstable_getRenderContext","getRootProps","_ref","other","onScroll","getContentProps","getRenderZoneProps"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useCurrentPageRows } from '../../utils/useCurrentPageRows';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function getIndexFromScroll(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? getIndexFromScroll(offset, positions, sliceStart, pivot) : getIndexFromScroll(offset, positions, pivot + 1, sliceEnd);\n}\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range2;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useCurrentPageRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const firstRowIndex = getIndexFromScroll(top, rowsMeta.positions);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top + rootRef.current.clientHeight, rowsMeta.positions);\n    const firstColumnIndex = getIndexFromScroll(left, columnPositions);\n    const lastColumnIndex = getIndexFromScroll(left + containerWidth, columnPositions);\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, GridEvents.resize, handleResize);\n\n  const getRenderableIndexes = ({\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  }) => {\n    return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n  };\n\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    var _currentPage$range;\n\n    const [firstRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: (_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.lastRowIndex,\n      buffer: rootProps.rowBuffer\n    });\n    const [firstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex, onRenderZonePositioning, renderZoneMaxColumnIndex, renderZoneMinColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext, updateRenderZonePosition]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    prevRenderContext.current = initialRenderContext;\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent(GridEvents.rowsScroll, params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const rowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const columnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const shouldSetState = rowsScrolledSincePreviousRender >= rootProps.rowThreshold || columnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent(GridEvents.rowsScroll, {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    });\n\n    if (shouldSetState) {\n      updateRenderContext(nextRenderContext);\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth\n    } = params;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const [firstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const renderedRows = currentPage.rows.slice(firstRowToRender, lastRowToRender);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const targetRowHeight = apiRef.current.unstable_getRowHeight(id);\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: targetRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + nextRenderContext.firstRowIndex + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent(GridEvents.virtualScrollerContentSizeChange);\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"]},"metadata":{},"sourceType":"module"}