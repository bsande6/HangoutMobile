{"ast":null,"code":"import getAllKeys from './_getAllKeys.js';\n'use strict';\n/** Used to compose bitmasks for value comparisons. */\n\n\nvar COMPARE_PARTIAL_FLAG = 1;\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n\n  var index = objLength;\n\n  while (index--) {\n    var key = objProps[index];\n\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  } // Assume cyclic values are equal.\n\n\n  var stacked = stack.get(object);\n\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n  var skipCtor = isPartial;\n\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n    } // Recursively compare objects (susceptible to call stack limits).\n\n\n    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n      result = false;\n      break;\n    }\n\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.\n\n    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/lib/lodash/_equalObjects.js"],"names":["getAllKeys","COMPARE_PARTIAL_FLAG","objectProto","Object","prototype","hasOwnProperty","equalObjects","object","other","bitmask","customizer","equalFunc","stack","isPartial","objProps","objLength","length","othProps","othLength","index","key","call","stacked","get","result","set","skipCtor","objValue","othValue","compared","undefined","objCtor","constructor","othCtor"],"mappings":"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","sourcesContent":["import getAllKeys from './_getAllKeys.js';\n'use strict';\n/** Used to compose bitmasks for value comparisons. */\n\n\nvar COMPARE_PARTIAL_FLAG = 1;\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n\n  var index = objLength;\n\n  while (index--) {\n    var key = objProps[index];\n\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  } // Assume cyclic values are equal.\n\n\n  var stacked = stack.get(object);\n\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n  var skipCtor = isPartial;\n\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n    } // Recursively compare objects (susceptible to call stack limits).\n\n\n    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n      result = false;\n      break;\n    }\n\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.\n\n    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;"]},"metadata":{},"sourceType":"module"}