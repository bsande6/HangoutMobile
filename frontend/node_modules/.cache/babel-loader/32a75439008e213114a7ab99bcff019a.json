{"ast":null,"code":"import * as React from 'react';\nimport { TimerBasedCleanupTracking } from '../../utils/cleanupTracking/TimerBasedCleanupTracking';\nimport { FinalizationRegistryBasedCleanupTracking } from '../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking';\n/**\n * Signal to the underlying logic what version of the public component API\n * of the data grid is exposed.\n */\n\nvar GridSignature; // We use class to make it easier to detect in heap snapshots by name\n\n(function (GridSignature) {\n  GridSignature[\"DataGrid\"] = \"DataGrid\";\n  GridSignature[\"DataGridPro\"] = \"DataGridPro\";\n})(GridSignature || (GridSignature = {}));\n\nclass ObjectToBeRetainedByReact {} // Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\n\n\nexport function createUseGridApiEventHandler(registry) {\n  let cleanupTokensCounter = 0;\n  return function useGridApiEventHandler(apiRef, eventName, handler, options) {\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          var _handlerRef$current;\n\n          (_handlerRef$current = handlerRef.current) == null ? void 0 : _handlerRef$current.call(handlerRef, params, event, details);\n        }\n      };\n\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registry.register(objectRetainedByReact, // The callback below will be called once this reference stops being retained\n      () => {\n        var _subscription$current;\n\n        (_subscription$current = subscription.current) == null ? void 0 : _subscription$current.call(subscription);\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n\n      if (cleanupTokenRef.current) {\n        registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event, details) => {\n          if (!event.defaultMuiPrevented) {\n            var _handlerRef$current2;\n\n            (_handlerRef$current2 = handlerRef.current) == null ? void 0 : _handlerRef$current2.call(handlerRef, params, event, details);\n          }\n        };\n\n        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      }\n\n      if (cleanupTokenRef.current && registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n\n      return () => {\n        var _subscription$current2;\n\n        (_subscription$current2 = subscription.current) == null ? void 0 : _subscription$current2.call(subscription);\n        subscription.current = null;\n      };\n    }, [apiRef, eventName, options]);\n  };\n}\nconst registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking(); // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport const unstable_resetCleanupTracking = () => registry.reset();\nexport const useGridApiEventHandler = createUseGridApiEventHandler(registry);\nconst optionsSubscriberOptions = {\n  isFirst: true\n};\nexport function useGridApiOptionHandler(apiRef, eventName, handler) {\n  // Validate that only one per event name?\n  useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);\n}\nexport { GridSignature };","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js"],"names":["React","TimerBasedCleanupTracking","FinalizationRegistryBasedCleanupTracking","GridSignature","ObjectToBeRetainedByReact","createUseGridApiEventHandler","registry","cleanupTokensCounter","useGridApiEventHandler","apiRef","eventName","handler","options","objectRetainedByReact","useState","subscription","useRef","handlerRef","current","cleanupTokenRef","enhancedHandler","params","event","details","defaultMuiPrevented","_handlerRef$current","call","subscribeEvent","cleanupToken","register","_subscription$current","unregister","useEffect","_handlerRef$current2","_subscription$current2","FinalizationRegistry","unstable_resetCleanupTracking","reset","optionsSubscriberOptions","isFirst","useGridApiOptionHandler"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TimerBasedCleanupTracking } from '../../utils/cleanupTracking/TimerBasedCleanupTracking';\nimport { FinalizationRegistryBasedCleanupTracking } from '../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking';\n\n/**\n * Signal to the underlying logic what version of the public component API\n * of the data grid is exposed.\n */\nvar GridSignature; // We use class to make it easier to detect in heap snapshots by name\n\n(function (GridSignature) {\n  GridSignature[\"DataGrid\"] = \"DataGrid\";\n  GridSignature[\"DataGridPro\"] = \"DataGridPro\";\n})(GridSignature || (GridSignature = {}));\n\nclass ObjectToBeRetainedByReact {} // Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\n\n\nexport function createUseGridApiEventHandler(registry) {\n  let cleanupTokensCounter = 0;\n  return function useGridApiEventHandler(apiRef, eventName, handler, options) {\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          var _handlerRef$current;\n\n          (_handlerRef$current = handlerRef.current) == null ? void 0 : _handlerRef$current.call(handlerRef, params, event, details);\n        }\n      };\n\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registry.register(objectRetainedByReact, // The callback below will be called once this reference stops being retained\n      () => {\n        var _subscription$current;\n\n        (_subscription$current = subscription.current) == null ? void 0 : _subscription$current.call(subscription);\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n\n      if (cleanupTokenRef.current) {\n        registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event, details) => {\n          if (!event.defaultMuiPrevented) {\n            var _handlerRef$current2;\n\n            (_handlerRef$current2 = handlerRef.current) == null ? void 0 : _handlerRef$current2.call(handlerRef, params, event, details);\n          }\n        };\n\n        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      }\n\n      if (cleanupTokenRef.current && registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n\n      return () => {\n        var _subscription$current2;\n\n        (_subscription$current2 = subscription.current) == null ? void 0 : _subscription$current2.call(subscription);\n        subscription.current = null;\n      };\n    }, [apiRef, eventName, options]);\n  };\n}\nconst registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking(); // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport const unstable_resetCleanupTracking = () => registry.reset();\nexport const useGridApiEventHandler = createUseGridApiEventHandler(registry);\nconst optionsSubscriberOptions = {\n  isFirst: true\n};\nexport function useGridApiOptionHandler(apiRef, eventName, handler) {\n  // Validate that only one per event name?\n  useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);\n}\nexport { GridSignature };"]},"metadata":{},"sourceType":"module"}