{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { GridRowModes, GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport const useGridRowEditing = (apiRef, props) => {\n  var _props$experimentalFe2, _props$experimentalFe4;\n\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const columnFields = useGridSelector(apiRef, gridColumnFieldsSelector);\n\n  const buildCallback = callback => function () {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...arguments);\n    }\n  };\n\n  const setRowMode = React.useCallback((id, mode) => {\n    if (mode === apiRef.current.getRowMode(id)) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      if (mode === GridRowModes.Edit) {\n        newEditRowsState[id] = {};\n        columnFields.forEach(field => {\n          const cellParams = apiRef.current.getCellParams(id, field);\n\n          if (cellParams.isEditable) {\n            newEditRowsState[id][field] = {\n              value: cellParams.value\n            };\n          }\n        });\n      } else {\n        delete newEditRowsState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, columnFields]);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const commitRowChange = React.useCallback(function (id) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _props$experimentalFe;\n\n    if (props.editMode === GridEditModes.Cell) {\n      throw new Error(`MUI: You can't commit changes when the edit mode is 'cell'.`);\n    }\n\n    apiRef.current.unstable_runPendingEditCellValueChangeDebounce(id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRowProps = model[id];\n\n    if (!editRowProps) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const isValid = Object.keys(editRowProps).reduce((acc, field) => {\n        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;\n      }, true);\n\n      if (!isValid) {\n        return false;\n      }\n    }\n\n    const hasFieldWithError = Object.values(editRowProps).some(value => !!value.error);\n\n    if (hasFieldWithError) {\n      return false;\n    }\n\n    const fieldsWithValidator = Object.keys(editRowProps).filter(field => {\n      const column = apiRef.current.getColumn(field);\n      return typeof column.preProcessEditCellProps === 'function';\n    });\n\n    if (fieldsWithValidator.length > 0) {\n      const row = apiRef.current.getRow(id);\n      const validatorErrors = fieldsWithValidator.map(async field => {\n        const column = apiRef.current.getColumn(field);\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: editRowProps[field]\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id,\n          field,\n          props: newEditCellProps\n        });\n        return newEditCellProps.error;\n      });\n      return Promise.all(validatorErrors).then(errors => {\n        if (errors.some(error => !!error)) {\n          return false;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n        return true;\n      });\n    }\n\n    apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n    return true;\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    const row = apiRef.current.getRow(params.id);\n    let isValid = true;\n    return new Promise(resolve => {\n      Object.keys(editRow).forEach(async field => {\n        const column = apiRef.current.getColumn(field);\n        let editCellProps = field === params.field ? {\n          value: params.value\n        } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props\n\n        editCellProps = apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: true\n          })\n        });\n\n        if (column.preProcessEditCellProps) {\n          editCellProps = await Promise.resolve(column.preProcessEditCellProps({\n            id: params.id,\n            row,\n            props: _extends({}, editCellProps, {\n              value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value\n            })\n          }));\n        }\n\n        if (editCellProps.error) {\n          isValid = false;\n        }\n\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: false\n          })\n        });\n      });\n      resolve(isValid);\n    });\n  }, [apiRef]);\n  const rowEditingApi = {\n    setRowMode,\n    getRowMode,\n    commitRowChange,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, rowEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    if (isEditMode) {\n      if (event.key === 'Enter') {\n        var _props$experimentalFe3; // TODO: check the return before firing GridEvents.rowEditStop\n        // On cell editing, it won't exits the edit mode with error\n\n\n        const isValid = await apiRef.current.commitRowChange(params.id);\n\n        if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {\n          return;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      } else if (event.key === 'Escape') {\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    } else if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n    }\n  }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n    apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n  }, [apiRef]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    Object.keys(editRow).forEach(async field => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.preProcessEditCellProps) {\n        const editCellProps = field === params.field ? params.props : editRow[field];\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id: params.id,\n          row,\n          props: editCellProps\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: newEditCellProps\n        });\n      } else if (field === params.field) {\n        apiRef.current.unstable_setEditCellProps(params);\n      }\n    });\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    apiRef.current.setRowMode(params.id, GridRowModes.Edit);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback((params, event) => {\n    apiRef.current.setRowMode(params.id, GridRowModes.View);\n\n    if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    }\n  }, [apiRef]);\n  const handleRowEditCommit = React.useCallback(id => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[id];\n\n    if (!editRow) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      let rowUpdate = _extends({}, row);\n\n      Object.keys(editRow).forEach(field => {\n        const column = apiRef.current.getColumn(field);\n        const value = editRow[field].value;\n\n        if (column.valueSetter) {\n          rowUpdate = column.valueSetter({\n            row: rowUpdate,\n            value\n          });\n        } else {\n          rowUpdate[field] = value;\n        }\n      });\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(async () => {\n      var _nextFocusedCell$curr;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        await apiRef.current.commitRowChange(params.id, event);\n        const rowParams = apiRef.current.getRowParams(params.id);\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    });\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, buildCallback(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, buildCallback(handleRowEditStop));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditCommit, buildCallback(handleRowEditCommit));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, buildCallback(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditCommit, props.onRowEditCommit);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.js"],"names":["_extends","React","useEventCallback","useGridApiMethod","GridRowModes","GridEditModes","GridCellModes","useGridSelector","gridColumnFieldsSelector","gridEditRowsStateSelector","GridEvents","gridFocusCellSelector","useGridApiOptionHandler","useGridApiEventHandler","useGridRowEditing","apiRef","props","_props$experimentalFe2","_props$experimentalFe4","focusTimeout","useRef","nextFocusedCell","columnFields","buildCallback","callback","editMode","Row","setRowMode","useCallback","id","mode","current","getRowMode","setState","state","newEditRowsState","editRows","Edit","forEach","field","cellParams","getCellParams","isEditable","value","forceUpdate","Cell","View","editRowsState","commitRowChange","event","_props$experimentalFe","Error","unstable_runPendingEditCellValueChangeDebounce","model","getEditRowsModel","editRowProps","experimentalFeatures","preventCommitWhileValidating","isValid","Object","keys","reduce","acc","isValidating","error","hasFieldWithError","values","some","fieldsWithValidator","filter","column","getColumn","preProcessEditCellProps","length","row","getRow","validatorErrors","map","newEditCellProps","Promise","resolve","unstable_setEditCellProps","all","then","errors","publishEvent","rowEditCommit","setRowEditingEditCellValue","params","editRow","editCellProps","unstable_parseValue","rowEditingApi","unstable_setRowEditingEditCellValue","handleCellKeyDown","cellMode","isEditMode","rowParams","getRowParams","key","_props$experimentalFe3","rowEditStop","rowEditStart","handleCellDoubleClick","handleEditCellPropsChange","handleRowEditStart","handleRowEditStop","cellNavigationKeyDown","handleRowEditCommit","rowUpdate","valueSetter","updateRows","handleCellFocusIn","commitPropsAndExit","setTimeout","_nextFocusedCell$curr","handleCellFocusOut","handleColumnHeaderDragStart","cell","cellKeyDown","cellDoubleClick","editCellPropsChange","cellFocusIn","cellFocusOut","columnHeaderDragStart","onRowEditCommit","onRowEditStart","onRowEditStop"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { GridRowModes, GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport const useGridRowEditing = (apiRef, props) => {\n  var _props$experimentalFe2, _props$experimentalFe4;\n\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const columnFields = useGridSelector(apiRef, gridColumnFieldsSelector);\n\n  const buildCallback = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const setRowMode = React.useCallback((id, mode) => {\n    if (mode === apiRef.current.getRowMode(id)) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      if (mode === GridRowModes.Edit) {\n        newEditRowsState[id] = {};\n        columnFields.forEach(field => {\n          const cellParams = apiRef.current.getCellParams(id, field);\n\n          if (cellParams.isEditable) {\n            newEditRowsState[id][field] = {\n              value: cellParams.value\n            };\n          }\n        });\n      } else {\n        delete newEditRowsState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, columnFields]);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const commitRowChange = React.useCallback((id, event = {}) => {\n    var _props$experimentalFe;\n\n    if (props.editMode === GridEditModes.Cell) {\n      throw new Error(`MUI: You can't commit changes when the edit mode is 'cell'.`);\n    }\n\n    apiRef.current.unstable_runPendingEditCellValueChangeDebounce(id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRowProps = model[id];\n\n    if (!editRowProps) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const isValid = Object.keys(editRowProps).reduce((acc, field) => {\n        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;\n      }, true);\n\n      if (!isValid) {\n        return false;\n      }\n    }\n\n    const hasFieldWithError = Object.values(editRowProps).some(value => !!value.error);\n\n    if (hasFieldWithError) {\n      return false;\n    }\n\n    const fieldsWithValidator = Object.keys(editRowProps).filter(field => {\n      const column = apiRef.current.getColumn(field);\n      return typeof column.preProcessEditCellProps === 'function';\n    });\n\n    if (fieldsWithValidator.length > 0) {\n      const row = apiRef.current.getRow(id);\n      const validatorErrors = fieldsWithValidator.map(async field => {\n        const column = apiRef.current.getColumn(field);\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: editRowProps[field]\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id,\n          field,\n          props: newEditCellProps\n        });\n        return newEditCellProps.error;\n      });\n      return Promise.all(validatorErrors).then(errors => {\n        if (errors.some(error => !!error)) {\n          return false;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n        return true;\n      });\n    }\n\n    apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n    return true;\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    const row = apiRef.current.getRow(params.id);\n    let isValid = true;\n    return new Promise(resolve => {\n      Object.keys(editRow).forEach(async field => {\n        const column = apiRef.current.getColumn(field);\n        let editCellProps = field === params.field ? {\n          value: params.value\n        } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props\n\n        editCellProps = apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: true\n          })\n        });\n\n        if (column.preProcessEditCellProps) {\n          editCellProps = await Promise.resolve(column.preProcessEditCellProps({\n            id: params.id,\n            row,\n            props: _extends({}, editCellProps, {\n              value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value\n            })\n          }));\n        }\n\n        if (editCellProps.error) {\n          isValid = false;\n        }\n\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: false\n          })\n        });\n      });\n      resolve(isValid);\n    });\n  }, [apiRef]);\n  const rowEditingApi = {\n    setRowMode,\n    getRowMode,\n    commitRowChange,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, rowEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    if (isEditMode) {\n      if (event.key === 'Enter') {\n        var _props$experimentalFe3;\n\n        // TODO: check the return before firing GridEvents.rowEditStop\n        // On cell editing, it won't exits the edit mode with error\n        const isValid = await apiRef.current.commitRowChange(params.id);\n\n        if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {\n          return;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      } else if (event.key === 'Escape') {\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    } else if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n    }\n  }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n    apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n  }, [apiRef]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    Object.keys(editRow).forEach(async field => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.preProcessEditCellProps) {\n        const editCellProps = field === params.field ? params.props : editRow[field];\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id: params.id,\n          row,\n          props: editCellProps\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: newEditCellProps\n        });\n      } else if (field === params.field) {\n        apiRef.current.unstable_setEditCellProps(params);\n      }\n    });\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    apiRef.current.setRowMode(params.id, GridRowModes.Edit);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback((params, event) => {\n    apiRef.current.setRowMode(params.id, GridRowModes.View);\n\n    if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    }\n  }, [apiRef]);\n  const handleRowEditCommit = React.useCallback(id => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[id];\n\n    if (!editRow) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      let rowUpdate = _extends({}, row);\n\n      Object.keys(editRow).forEach(field => {\n        const column = apiRef.current.getColumn(field);\n        const value = editRow[field].value;\n\n        if (column.valueSetter) {\n          rowUpdate = column.valueSetter({\n            row: rowUpdate,\n            value\n          });\n        } else {\n          rowUpdate[field] = value;\n        }\n      });\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(async () => {\n      var _nextFocusedCell$curr;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        await apiRef.current.commitRowChange(params.id, event);\n        const rowParams = apiRef.current.getRowParams(params.id);\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    });\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, buildCallback(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, buildCallback(handleRowEditStop));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditCommit, buildCallback(handleRowEditCommit));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, buildCallback(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditCommit, props.onRowEditCommit);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n};"]},"metadata":{},"sourceType":"module"}