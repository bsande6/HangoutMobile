{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { GridEvents } from '../../../models/events';\nimport { gridVisibleTopLevelRowCountSelector } from '../filter';\nimport { gridPageSelector } from './gridPaginationSelector';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { buildWarning } from '../../../utils/warning';\n\nconst getPageCount = (rowCount, pageSize) => {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n\n  return 0;\n};\n\nconst applyValidPage = paginationState => {\n  if (!paginationState.pageCount) {\n    return paginationState;\n  }\n\n  return _extends({}, paginationState, {\n    page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)\n  });\n};\n\nconst mergeStateWithPage = page => state => _extends({}, state, {\n  pagination: applyValidPage(_extends({}, state.pagination, {\n    page\n  }))\n});\n\nconst noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\nexport const pageStateInitializer = (state, props) => {\n  var _ref, _props$page, _props$initialState, _props$initialState$p, _props$rowCount, _props$rowCount2;\n\n  return _extends({}, state, {\n    pagination: _extends({}, state.pagination, {\n      page: (_ref = (_props$page = props.page) != null ? _props$page : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null ? _ref : 0,\n      pageCount: getPageCount((_props$rowCount = props.rowCount) != null ? _props$rowCount : 0, state.pagination.pageSize),\n      rowCount: (_props$rowCount2 = props.rowCount) != null ? _props$rowCount2 : 0\n    })\n  });\n};\n/**\n * @requires useGridPageSize (event)\n */\n\nexport const useGridPage = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$;\n\n  const logger = useGridLogger(apiRef, 'useGridPage');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'page',\n    propModel: props.page,\n    propOnChange: props.onPageChange,\n    stateSelector: gridPageSelector,\n    changeEvent: GridEvents.pageChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPage = React.useCallback(page => {\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setState(mergeStateWithPage(page));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageApi = {\n    setPage\n  };\n  useGridApiMethod(apiRef, pageApi, 'GridPageApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState2, _props$initialState2$;\n\n    const pageToExport = gridPageSelector(apiRef);\n    const shouldExportPage = // Always export if the page is controlled\n    props.page != null || // Always export if the page has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page) != null || // Export if the page value is not equal to the default value\n    pageToExport !== 0;\n\n    if (!shouldExportPage) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        page: pageToExport\n      })\n    });\n  }, [apiRef, props.page, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.pagination) == null ? void 0 : _props$initialState3$.page]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2; // We apply the constraint even if the page did not change in case the pageSize changed.\n\n\n    const page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);\n    apiRef.current.setState(mergeStateWithPage(page));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePageSizeChange = pageSize => {\n    apiRef.current.setState(state => {\n      const pageCount = getPageCount(state.pagination.rowCount, pageSize);\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          pageCount,\n          page: state.pagination.page\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  };\n\n  useGridApiEventHandler(apiRef, GridEvents.pageSizeChange, handlePageSizeChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    apiRef.current.setState(state => {\n      const rowCount = props.rowCount !== undefined ? props.rowCount : visibleTopLevelRowCount;\n      const pageCount = getPageCount(rowCount, state.pagination.pageSize);\n      const page = props.page == null ? state.pagination.page : props.page;\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          page,\n          rowCount,\n          pageCount\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPage.js"],"names":["_extends","React","useGridLogger","useGridSelector","useGridApiMethod","useGridApiEventHandler","GridEvents","gridVisibleTopLevelRowCountSelector","gridPageSelector","useGridRegisterPreProcessor","buildWarning","getPageCount","rowCount","pageSize","Math","ceil","applyValidPage","paginationState","pageCount","page","max","min","mergeStateWithPage","state","pagination","noRowCountInServerMode","pageStateInitializer","props","_ref","_props$page","_props$initialState","_props$initialState$p","_props$rowCount","_props$rowCount2","initialState","useGridPage","apiRef","_props$initialState3","_props$initialState3$","logger","visibleTopLevelRowCount","current","unstable_updateControlState","stateId","propModel","propOnChange","onPageChange","stateSelector","changeEvent","pageChange","setPage","useCallback","debug","setState","forceUpdate","pageApi","stateExportPreProcessing","prevState","_props$initialState2","_props$initialState2$","pageToExport","shouldExportPage","stateRestorePreProcessing","params","context","_context$stateToResto","_context$stateToResto2","stateToRestore","handlePageSizeChange","pageSizeChange","useEffect","process","env","NODE_ENV","paginationMode","undefined"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,gBAAzC,EAA2DC,sBAA3D,QAAyF,aAAzF;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,mCAAT,QAAoD,WAApD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,2BAAT,QAA4C,0BAA5C;AACA,SAASC,YAAT,QAA6B,wBAA7B;;AAEA,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3C,MAAIA,QAAQ,GAAG,CAAX,IAAgBD,QAAQ,GAAG,CAA/B,EAAkC;AAChC,WAAOE,IAAI,CAACC,IAAL,CAAUH,QAAQ,GAAGC,QAArB,CAAP;AACD;;AAED,SAAO,CAAP;AACD,CAND;;AAQA,MAAMG,cAAc,GAAGC,eAAe,IAAI;AACxC,MAAI,CAACA,eAAe,CAACC,SAArB,EAAgC;AAC9B,WAAOD,eAAP;AACD;;AAED,SAAOjB,QAAQ,CAAC,EAAD,EAAKiB,eAAL,EAAsB;AACnCE,IAAAA,IAAI,EAAEL,IAAI,CAACM,GAAL,CAASN,IAAI,CAACO,GAAL,CAASJ,eAAe,CAACE,IAAzB,EAA+BF,eAAe,CAACC,SAAhB,GAA4B,CAA3D,CAAT,EAAwE,CAAxE;AAD6B,GAAtB,CAAf;AAGD,CARD;;AAUA,MAAMI,kBAAkB,GAAGH,IAAI,IAAII,KAAK,IAAIvB,QAAQ,CAAC,EAAD,EAAKuB,KAAL,EAAY;AAC9DC,EAAAA,UAAU,EAAER,cAAc,CAAChB,QAAQ,CAAC,EAAD,EAAKuB,KAAK,CAACC,UAAX,EAAuB;AACxDL,IAAAA;AADwD,GAAvB,CAAT;AADoC,CAAZ,CAApD;;AAMA,MAAMM,sBAAsB,GAAGf,YAAY,CAAC,CAAC,2EAAD,EAA8E,2FAA9E,CAAD,EAA6K,OAA7K,CAA3C;AACA,OAAO,MAAMgB,oBAAoB,GAAG,CAACH,KAAD,EAAQI,KAAR,KAAkB;AACpD,MAAIC,IAAJ,EAAUC,WAAV,EAAuBC,mBAAvB,EAA4CC,qBAA5C,EAAmEC,eAAnE,EAAoFC,gBAApF;;AAEA,SAAOjC,QAAQ,CAAC,EAAD,EAAKuB,KAAL,EAAY;AACzBC,IAAAA,UAAU,EAAExB,QAAQ,CAAC,EAAD,EAAKuB,KAAK,CAACC,UAAX,EAAuB;AACzCL,MAAAA,IAAI,EAAE,CAACS,IAAI,GAAG,CAACC,WAAW,GAAGF,KAAK,CAACR,IAArB,KAA8B,IAA9B,GAAqCU,WAArC,GAAmD,CAACC,mBAAmB,GAAGH,KAAK,CAACO,YAA7B,KAA8C,IAA9C,GAAqD,KAAK,CAA1D,GAA8D,CAACH,qBAAqB,GAAGD,mBAAmB,CAACN,UAA7C,KAA4D,IAA5D,GAAmE,KAAK,CAAxE,GAA4EO,qBAAqB,CAACZ,IAA3N,KAAoO,IAApO,GAA2OS,IAA3O,GAAkP,CAD/M;AAEzCV,MAAAA,SAAS,EAAEP,YAAY,CAAC,CAACqB,eAAe,GAAGL,KAAK,CAACf,QAAzB,KAAsC,IAAtC,GAA6CoB,eAA7C,GAA+D,CAAhE,EAAmET,KAAK,CAACC,UAAN,CAAiBX,QAApF,CAFkB;AAGzCD,MAAAA,QAAQ,EAAE,CAACqB,gBAAgB,GAAGN,KAAK,CAACf,QAA1B,KAAuC,IAAvC,GAA8CqB,gBAA9C,GAAiE;AAHlC,KAAvB;AADK,GAAZ,CAAf;AAOD,CAVM;AAWP;AACA;AACA;;AAEA,OAAO,MAAME,WAAW,GAAG,CAACC,MAAD,EAAST,KAAT,KAAmB;AAC5C,MAAIU,oBAAJ,EAA0BC,qBAA1B;;AAEA,QAAMC,MAAM,GAAGrC,aAAa,CAACkC,MAAD,EAAS,aAAT,CAA5B;AACA,QAAMI,uBAAuB,GAAGrC,eAAe,CAACiC,MAAD,EAAS7B,mCAAT,CAA/C;AACA6B,EAAAA,MAAM,CAACK,OAAP,CAAeC,2BAAf,CAA2C;AACzCC,IAAAA,OAAO,EAAE,MADgC;AAEzCC,IAAAA,SAAS,EAAEjB,KAAK,CAACR,IAFwB;AAGzC0B,IAAAA,YAAY,EAAElB,KAAK,CAACmB,YAHqB;AAIzCC,IAAAA,aAAa,EAAEvC,gBAJ0B;AAKzCwC,IAAAA,WAAW,EAAE1C,UAAU,CAAC2C;AALiB,GAA3C;AAOA;AACF;AACA;;AAEE,QAAMC,OAAO,GAAGjD,KAAK,CAACkD,WAAN,CAAkBhC,IAAI,IAAI;AACxCoB,IAAAA,MAAM,CAACa,KAAP,CAAc,mBAAkBjC,IAAK,EAArC;AACAiB,IAAAA,MAAM,CAACK,OAAP,CAAeY,QAAf,CAAwB/B,kBAAkB,CAACH,IAAD,CAA1C;AACAiB,IAAAA,MAAM,CAACK,OAAP,CAAea,WAAf;AACD,GAJe,EAIb,CAAClB,MAAD,EAASG,MAAT,CAJa,CAAhB;AAKA,QAAMgB,OAAO,GAAG;AACdL,IAAAA;AADc,GAAhB;AAGA9C,EAAAA,gBAAgB,CAACgC,MAAD,EAASmB,OAAT,EAAkB,aAAlB,CAAhB;AACA;AACF;AACA;;AAEE,QAAMC,wBAAwB,GAAGvD,KAAK,CAACkD,WAAN,CAAkBM,SAAS,IAAI;AAC9D,QAAIC,oBAAJ,EAA0BC,qBAA1B;;AAEA,UAAMC,YAAY,GAAGpD,gBAAgB,CAAC4B,MAAD,CAArC;AACA,UAAMyB,gBAAgB,GAAG;AACzBlC,IAAAA,KAAK,CAACR,IAAN,IAAc,IAAd,IAAsB;AACtB,KAAC,CAACuC,oBAAoB,GAAG/B,KAAK,CAACO,YAA9B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+D,CAACyB,qBAAqB,GAAGD,oBAAoB,CAAClC,UAA9C,KAA6D,IAA7D,GAAoE,KAAK,CAAzE,GAA6EmC,qBAAqB,CAACxC,IAAnK,KAA4K,IAD5K,IACoL;AACpLyC,IAAAA,YAAY,KAAK,CAHjB;;AAKA,QAAI,CAACC,gBAAL,EAAuB;AACrB,aAAOJ,SAAP;AACD;;AAED,WAAOzD,QAAQ,CAAC,EAAD,EAAKyD,SAAL,EAAgB;AAC7BjC,MAAAA,UAAU,EAAExB,QAAQ,CAAC,EAAD,EAAKyD,SAAS,CAACjC,UAAf,EAA2B;AAC7CL,QAAAA,IAAI,EAAEyC;AADuC,OAA3B;AADS,KAAhB,CAAf;AAKD,GAlBgC,EAkB9B,CAACxB,MAAD,EAAST,KAAK,CAACR,IAAf,EAAqB,CAACkB,oBAAoB,GAAGV,KAAK,CAACO,YAA9B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+D,CAACI,qBAAqB,GAAGD,oBAAoB,CAACb,UAA9C,KAA6D,IAA7D,GAAoE,KAAK,CAAzE,GAA6Ec,qBAAqB,CAACnB,IAAvL,CAlB8B,CAAjC;AAmBA,QAAM2C,yBAAyB,GAAG7D,KAAK,CAACkD,WAAN,CAAkB,CAACY,MAAD,EAASC,OAAT,KAAqB;AACvE,QAAIC,qBAAJ,EAA2BC,sBAA3B,CADuE,CAGvE;;;AACA,UAAM/C,IAAI,GAAG,CAAC8C,qBAAqB,GAAG,CAACC,sBAAsB,GAAGF,OAAO,CAACG,cAAR,CAAuB3C,UAAjD,KAAgE,IAAhE,GAAuE,KAAK,CAA5E,GAAgF0C,sBAAsB,CAAC/C,IAAhI,KAAyI,IAAzI,GAAgJ8C,qBAAhJ,GAAwKzD,gBAAgB,CAAC4B,MAAD,CAArM;AACAA,IAAAA,MAAM,CAACK,OAAP,CAAeY,QAAf,CAAwB/B,kBAAkB,CAACH,IAAD,CAA1C;AACA,WAAO4C,MAAP;AACD,GAPiC,EAO/B,CAAC3B,MAAD,CAP+B,CAAlC;AAQA3B,EAAAA,2BAA2B,CAAC2B,MAAD,EAAS,aAAT,EAAwBoB,wBAAxB,CAA3B;AACA/C,EAAAA,2BAA2B,CAAC2B,MAAD,EAAS,cAAT,EAAyB0B,yBAAzB,CAA3B;AACA;AACF;AACA;;AAEE,QAAMM,oBAAoB,GAAGvD,QAAQ,IAAI;AACvCuB,IAAAA,MAAM,CAACK,OAAP,CAAeY,QAAf,CAAwB9B,KAAK,IAAI;AAC/B,YAAML,SAAS,GAAGP,YAAY,CAACY,KAAK,CAACC,UAAN,CAAiBZ,QAAlB,EAA4BC,QAA5B,CAA9B;AACA,aAAOb,QAAQ,CAAC,EAAD,EAAKuB,KAAL,EAAY;AACzBC,QAAAA,UAAU,EAAER,cAAc,CAAChB,QAAQ,CAAC,EAAD,EAAKuB,KAAK,CAACC,UAAX,EAAuB;AACxDN,UAAAA,SADwD;AAExDC,UAAAA,IAAI,EAAEI,KAAK,CAACC,UAAN,CAAiBL;AAFiC,SAAvB,CAAT;AADD,OAAZ,CAAf;AAMD,KARD;AASAiB,IAAAA,MAAM,CAACK,OAAP,CAAea,WAAf;AACD,GAXD;;AAaAjD,EAAAA,sBAAsB,CAAC+B,MAAD,EAAS9B,UAAU,CAAC+D,cAApB,EAAoCD,oBAApC,CAAtB;AACA;AACF;AACA;;AAEEnE,EAAAA,KAAK,CAACqE,SAAN,CAAgB,MAAM;AACpB,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI9C,KAAK,CAAC+C,cAAN,KAAyB,QAAzB,IAAqC/C,KAAK,CAACf,QAAN,IAAkB,IAA3D,EAAiE;AAC/Da,QAAAA,sBAAsB;AACvB;AACF;AACF,GAND,EAMG,CAACE,KAAK,CAACf,QAAP,EAAiBe,KAAK,CAAC+C,cAAvB,CANH;AAOAzE,EAAAA,KAAK,CAACqE,SAAN,CAAgB,MAAM;AACpBlC,IAAAA,MAAM,CAACK,OAAP,CAAeY,QAAf,CAAwB9B,KAAK,IAAI;AAC/B,YAAMX,QAAQ,GAAGe,KAAK,CAACf,QAAN,KAAmB+D,SAAnB,GAA+BhD,KAAK,CAACf,QAArC,GAAgD4B,uBAAjE;AACA,YAAMtB,SAAS,GAAGP,YAAY,CAACC,QAAD,EAAWW,KAAK,CAACC,UAAN,CAAiBX,QAA5B,CAA9B;AACA,YAAMM,IAAI,GAAGQ,KAAK,CAACR,IAAN,IAAc,IAAd,GAAqBI,KAAK,CAACC,UAAN,CAAiBL,IAAtC,GAA6CQ,KAAK,CAACR,IAAhE;AACA,aAAOnB,QAAQ,CAAC,EAAD,EAAKuB,KAAL,EAAY;AACzBC,QAAAA,UAAU,EAAER,cAAc,CAAChB,QAAQ,CAAC,EAAD,EAAKuB,KAAK,CAACC,UAAX,EAAuB;AACxDL,UAAAA,IADwD;AAExDP,UAAAA,QAFwD;AAGxDM,UAAAA;AAHwD,SAAvB,CAAT;AADD,OAAZ,CAAf;AAOD,KAXD;AAYAkB,IAAAA,MAAM,CAACK,OAAP,CAAea,WAAf;AACD,GAdD,EAcG,CAACd,uBAAD,EAA0Bb,KAAK,CAACf,QAAhC,EAA0Ce,KAAK,CAACR,IAAhD,EAAsDQ,KAAK,CAAC+C,cAA5D,EAA4EtC,MAA5E,CAdH;AAeD,CAtGM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { GridEvents } from '../../../models/events';\nimport { gridVisibleTopLevelRowCountSelector } from '../filter';\nimport { gridPageSelector } from './gridPaginationSelector';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { buildWarning } from '../../../utils/warning';\n\nconst getPageCount = (rowCount, pageSize) => {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n\n  return 0;\n};\n\nconst applyValidPage = paginationState => {\n  if (!paginationState.pageCount) {\n    return paginationState;\n  }\n\n  return _extends({}, paginationState, {\n    page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)\n  });\n};\n\nconst mergeStateWithPage = page => state => _extends({}, state, {\n  pagination: applyValidPage(_extends({}, state.pagination, {\n    page\n  }))\n});\n\nconst noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\nexport const pageStateInitializer = (state, props) => {\n  var _ref, _props$page, _props$initialState, _props$initialState$p, _props$rowCount, _props$rowCount2;\n\n  return _extends({}, state, {\n    pagination: _extends({}, state.pagination, {\n      page: (_ref = (_props$page = props.page) != null ? _props$page : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null ? _ref : 0,\n      pageCount: getPageCount((_props$rowCount = props.rowCount) != null ? _props$rowCount : 0, state.pagination.pageSize),\n      rowCount: (_props$rowCount2 = props.rowCount) != null ? _props$rowCount2 : 0\n    })\n  });\n};\n/**\n * @requires useGridPageSize (event)\n */\n\nexport const useGridPage = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$;\n\n  const logger = useGridLogger(apiRef, 'useGridPage');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'page',\n    propModel: props.page,\n    propOnChange: props.onPageChange,\n    stateSelector: gridPageSelector,\n    changeEvent: GridEvents.pageChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPage = React.useCallback(page => {\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setState(mergeStateWithPage(page));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageApi = {\n    setPage\n  };\n  useGridApiMethod(apiRef, pageApi, 'GridPageApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState2, _props$initialState2$;\n\n    const pageToExport = gridPageSelector(apiRef);\n    const shouldExportPage = // Always export if the page is controlled\n    props.page != null || // Always export if the page has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page) != null || // Export if the page value is not equal to the default value\n    pageToExport !== 0;\n\n    if (!shouldExportPage) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        page: pageToExport\n      })\n    });\n  }, [apiRef, props.page, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.pagination) == null ? void 0 : _props$initialState3$.page]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2;\n\n    // We apply the constraint even if the page did not change in case the pageSize changed.\n    const page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);\n    apiRef.current.setState(mergeStateWithPage(page));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePageSizeChange = pageSize => {\n    apiRef.current.setState(state => {\n      const pageCount = getPageCount(state.pagination.rowCount, pageSize);\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          pageCount,\n          page: state.pagination.page\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  };\n\n  useGridApiEventHandler(apiRef, GridEvents.pageSizeChange, handlePageSizeChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    apiRef.current.setState(state => {\n      const rowCount = props.rowCount !== undefined ? props.rowCount : visibleTopLevelRowCount;\n      const pageCount = getPageCount(rowCount, state.pagination.pageSize);\n      const page = props.page == null ? state.pagination.page : props.page;\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          page,\n          rowCount,\n          pageCount\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);\n};"]},"metadata":{},"sourceType":"module"}