{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getCurrentPageRows } from '../../utils/useCurrentPageRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridStateInit } from '../../utils/useGridStateInit';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight,\n    pagination,\n    paginationMode\n  } = props;\n  const rowsHeightLookup = React.useRef({});\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  useGridStateInit(apiRef, state => _extends({}, state, {\n    rowsMeta: {\n      currentPageTotalHeight: 0,\n      positions: []\n    }\n  }));\n  const hydrateRowsMeta = React.useCallback(() => {\n    const {\n      rows\n    } = getCurrentPageRows(apiRef, {\n      pagination,\n      paginationMode\n    });\n    apiRef.current.setState(state => {\n      const positions = [];\n      const densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);\n      const currentRowHeight = gridDensityRowHeightSelector(state, apiRef.current.instanceId);\n      const currentPageTotalHeight = rows.reduce((acc, row) => {\n        positions.push(acc);\n        let baseRowHeight;\n        const isResized = rowsHeightLookup.current[row.id] && rowsHeightLookup.current[row.id].isResized || false;\n\n        if (isResized) {\n          // do not recalculate resized row height and use the value from the lookup\n          baseRowHeight = rowsHeightLookup.current[row.id].value;\n        } else {\n          baseRowHeight = currentRowHeight;\n\n          if (getRowHeight) {\n            var _getRowHeight; // Default back to base rowHeight if getRowHeight returns null or undefined.\n\n\n            baseRowHeight = (_getRowHeight = getRowHeight(_extends({}, row, {\n              densityFactor\n            }))) != null ? _getRowHeight : currentRowHeight;\n          }\n        }\n\n        const heights = apiRef.current.unstable_applyPreProcessors('rowHeight', {\n          base: baseRowHeight\n        }, // We use an object to make simple to check if a size was already added or not\n        row);\n        const finalRowHeight = Object.values(heights).reduce((acc2, value) => acc2 + value, 0);\n        rowsHeightLookup.current[row.id] = {\n          value: baseRowHeight,\n          isResized\n        };\n        return acc + finalRowHeight;\n      }, 0);\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, pagination, paginationMode, getRowHeight]);\n\n  const getTargetRowHeight = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return ((_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.value) || rowHeight;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id] = {\n      value: height,\n      isResized: true\n    };\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  const handlePreProcessorRegister = React.useCallback(name => {\n    if (name !== 'rowHeight') {\n      return;\n    }\n\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  useGridApiEventHandler(apiRef, GridEvents.preProcessorRegister, handlePreProcessorRegister);\n  const rowsMetaApi = {\n    unstable_getRowHeight: getTargetRowHeight,\n    unstable_setRowHeight: setRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"names":["_extends","React","getCurrentPageRows","useGridApiMethod","useGridSelector","gridDensityRowHeightSelector","gridDensityFactorSelector","gridFilterStateSelector","gridPaginationSelector","gridSortingStateSelector","useGridStateInit","GridEvents","useGridApiEventHandler","useGridRowsMeta","apiRef","props","getRowHeight","pagination","paginationMode","rowsHeightLookup","useRef","rowHeight","filterState","paginationState","sortingState","state","rowsMeta","currentPageTotalHeight","positions","hydrateRowsMeta","useCallback","rows","current","setState","densityFactor","instanceId","currentRowHeight","reduce","acc","row","push","baseRowHeight","isResized","id","value","_getRowHeight","heights","unstable_applyPreProcessors","base","finalRowHeight","Object","values","acc2","forceUpdate","getTargetRowHeight","rowId","_rowsHeightLookup$cur","setRowHeight","height","useEffect","handlePreProcessorRegister","name","preProcessorRegister","rowsMetaApi","unstable_getRowHeight","unstable_setRowHeight"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getCurrentPageRows } from '../../utils/useCurrentPageRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridStateInit } from '../../utils/useGridStateInit';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight,\n    pagination,\n    paginationMode\n  } = props;\n  const rowsHeightLookup = React.useRef({});\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  useGridStateInit(apiRef, state => _extends({}, state, {\n    rowsMeta: {\n      currentPageTotalHeight: 0,\n      positions: []\n    }\n  }));\n  const hydrateRowsMeta = React.useCallback(() => {\n    const {\n      rows\n    } = getCurrentPageRows(apiRef, {\n      pagination,\n      paginationMode\n    });\n    apiRef.current.setState(state => {\n      const positions = [];\n      const densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);\n      const currentRowHeight = gridDensityRowHeightSelector(state, apiRef.current.instanceId);\n      const currentPageTotalHeight = rows.reduce((acc, row) => {\n        positions.push(acc);\n        let baseRowHeight;\n        const isResized = rowsHeightLookup.current[row.id] && rowsHeightLookup.current[row.id].isResized || false;\n\n        if (isResized) {\n          // do not recalculate resized row height and use the value from the lookup\n          baseRowHeight = rowsHeightLookup.current[row.id].value;\n        } else {\n          baseRowHeight = currentRowHeight;\n\n          if (getRowHeight) {\n            var _getRowHeight;\n\n            // Default back to base rowHeight if getRowHeight returns null or undefined.\n            baseRowHeight = (_getRowHeight = getRowHeight(_extends({}, row, {\n              densityFactor\n            }))) != null ? _getRowHeight : currentRowHeight;\n          }\n        }\n\n        const heights = apiRef.current.unstable_applyPreProcessors('rowHeight', {\n          base: baseRowHeight\n        }, // We use an object to make simple to check if a size was already added or not\n        row);\n        const finalRowHeight = Object.values(heights).reduce((acc2, value) => acc2 + value, 0);\n        rowsHeightLookup.current[row.id] = {\n          value: baseRowHeight,\n          isResized\n        };\n        return acc + finalRowHeight;\n      }, 0);\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, pagination, paginationMode, getRowHeight]);\n\n  const getTargetRowHeight = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return ((_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.value) || rowHeight;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id] = {\n      value: height,\n      isResized: true\n    };\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  const handlePreProcessorRegister = React.useCallback(name => {\n    if (name !== 'rowHeight') {\n      return;\n    }\n\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  useGridApiEventHandler(apiRef, GridEvents.preProcessorRegister, handlePreProcessorRegister);\n  const rowsMetaApi = {\n    unstable_getRowHeight: getTargetRowHeight,\n    unstable_setRowHeight: setRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};"]},"metadata":{},"sourceType":"module"}