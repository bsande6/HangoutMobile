{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridDensityTypes } from '../../../models/gridDensity';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridStateInit } from '../../utils/useGridStateInit';\nimport { gridDensitySelector } from './densitySelector';\nimport { isDeepEqual } from '../../../utils/utils';\nexport const COMPACT_DENSITY_FACTOR = 0.7;\nexport const COMFORTABLE_DENSITY_FACTOR = 1.3; // TODO v6: revise keeping headerHeight and rowHeight in state\n\nconst getUpdatedDensityState = (newDensity, newHeaderHeight, newRowHeight) => {\n  switch (newDensity) {\n    case GridDensityTypes.Compact:\n      return {\n        value: newDensity,\n        headerHeight: Math.floor(newHeaderHeight * COMPACT_DENSITY_FACTOR),\n        rowHeight: Math.floor(newRowHeight * COMPACT_DENSITY_FACTOR),\n        factor: COMPACT_DENSITY_FACTOR\n      };\n\n    case GridDensityTypes.Comfortable:\n      return {\n        value: newDensity,\n        headerHeight: Math.floor(newHeaderHeight * COMFORTABLE_DENSITY_FACTOR),\n        rowHeight: Math.floor(newRowHeight * COMFORTABLE_DENSITY_FACTOR),\n        factor: COMFORTABLE_DENSITY_FACTOR\n      };\n\n    default:\n      return {\n        value: newDensity,\n        headerHeight: newHeaderHeight,\n        rowHeight: newRowHeight,\n        factor: 1\n      };\n  }\n};\n\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  useGridStateInit(apiRef, state => _extends({}, state, {\n    density: getUpdatedDensityState(props.density, props.headerHeight, props.rowHeight)\n  }));\n  const setDensity = React.useCallback(function (newDensity) {\n    let newHeaderHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.headerHeight;\n    let newRowHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.rowHeight;\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => {\n      const currentDensityState = gridDensitySelector(state);\n      const newDensityState = getUpdatedDensityState(newDensity, newHeaderHeight, newRowHeight);\n\n      if (isDeepEqual(currentDensityState, newDensityState)) {\n        return state;\n      }\n\n      return _extends({}, state, {\n        density: newDensityState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef, props.headerHeight, props.rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.setDensity(props.density, props.headerHeight, props.rowHeight);\n  }, [apiRef, props.density, props.rowHeight, props.headerHeight]);\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'GridDensityApi');\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js"],"names":["_extends","React","GridDensityTypes","useGridLogger","useGridApiMethod","useGridStateInit","gridDensitySelector","isDeepEqual","COMPACT_DENSITY_FACTOR","COMFORTABLE_DENSITY_FACTOR","getUpdatedDensityState","newDensity","newHeaderHeight","newRowHeight","Compact","value","headerHeight","Math","floor","rowHeight","factor","Comfortable","useGridDensity","apiRef","props","logger","state","density","setDensity","useCallback","debug","current","setState","currentDensityState","newDensityState","forceUpdate","useEffect","densityApi"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridDensityTypes } from '../../../models/gridDensity';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridStateInit } from '../../utils/useGridStateInit';\nimport { gridDensitySelector } from './densitySelector';\nimport { isDeepEqual } from '../../../utils/utils';\nexport const COMPACT_DENSITY_FACTOR = 0.7;\nexport const COMFORTABLE_DENSITY_FACTOR = 1.3; // TODO v6: revise keeping headerHeight and rowHeight in state\n\nconst getUpdatedDensityState = (newDensity, newHeaderHeight, newRowHeight) => {\n  switch (newDensity) {\n    case GridDensityTypes.Compact:\n      return {\n        value: newDensity,\n        headerHeight: Math.floor(newHeaderHeight * COMPACT_DENSITY_FACTOR),\n        rowHeight: Math.floor(newRowHeight * COMPACT_DENSITY_FACTOR),\n        factor: COMPACT_DENSITY_FACTOR\n      };\n\n    case GridDensityTypes.Comfortable:\n      return {\n        value: newDensity,\n        headerHeight: Math.floor(newHeaderHeight * COMFORTABLE_DENSITY_FACTOR),\n        rowHeight: Math.floor(newRowHeight * COMFORTABLE_DENSITY_FACTOR),\n        factor: COMFORTABLE_DENSITY_FACTOR\n      };\n\n    default:\n      return {\n        value: newDensity,\n        headerHeight: newHeaderHeight,\n        rowHeight: newRowHeight,\n        factor: 1\n      };\n  }\n};\n\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  useGridStateInit(apiRef, state => _extends({}, state, {\n    density: getUpdatedDensityState(props.density, props.headerHeight, props.rowHeight)\n  }));\n  const setDensity = React.useCallback((newDensity, newHeaderHeight = props.headerHeight, newRowHeight = props.rowHeight) => {\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => {\n      const currentDensityState = gridDensitySelector(state);\n      const newDensityState = getUpdatedDensityState(newDensity, newHeaderHeight, newRowHeight);\n\n      if (isDeepEqual(currentDensityState, newDensityState)) {\n        return state;\n      }\n\n      return _extends({}, state, {\n        density: newDensityState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef, props.headerHeight, props.rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.setDensity(props.density, props.headerHeight, props.rowHeight);\n  }, [apiRef, props.density, props.rowHeight, props.headerHeight]);\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'GridDensityApi');\n};"]},"metadata":{},"sourceType":"module"}