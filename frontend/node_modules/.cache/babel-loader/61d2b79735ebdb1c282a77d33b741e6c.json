{"ast":null,"code":"import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n'use strict';\n/** Used as the size to enable large array optimizations. */\n\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\n\nfunction stackSet(key, value) {\n  var data = this.__data__;\n\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n\n    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n\n    data = this.__data__ = new MapCache(pairs);\n  }\n\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/lib/lodash/_stackSet.js"],"names":["ListCache","Map","MapCache","LARGE_ARRAY_SIZE","stackSet","key","value","data","__data__","pairs","length","push","size","set"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA;AACA;;;AAGA,IAAIC,gBAAgB,GAAG,GAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,IAAI,GAAG,KAAKC,QAAhB;;AAEA,MAAID,IAAI,YAAYP,SAApB,EAA+B;AAC7B,QAAIS,KAAK,GAAGF,IAAI,CAACC,QAAjB;;AAEA,QAAI,CAACP,GAAD,IAAQQ,KAAK,CAACC,MAAN,GAAeP,gBAAgB,GAAG,CAA9C,EAAiD;AAC/CM,MAAAA,KAAK,CAACE,IAAN,CAAW,CAACN,GAAD,EAAMC,KAAN,CAAX;AACA,WAAKM,IAAL,GAAY,EAAEL,IAAI,CAACK,IAAnB;AACA,aAAO,IAAP;AACD;;AAEDL,IAAAA,IAAI,GAAG,KAAKC,QAAL,GAAgB,IAAIN,QAAJ,CAAaO,KAAb,CAAvB;AACD;;AAEDF,EAAAA,IAAI,CAACM,GAAL,CAASR,GAAT,EAAcC,KAAd;AACA,OAAKM,IAAL,GAAYL,IAAI,CAACK,IAAjB;AACA,SAAO,IAAP;AACD;;AAED,eAAeR,QAAf","sourcesContent":["import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n'use strict';\n/** Used as the size to enable large array optimizations. */\n\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\n\nfunction stackSet(key, value) {\n  var data = this.__data__;\n\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n\n    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n\n    data = this.__data__ = new MapCache(pairs);\n  }\n\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;"]},"metadata":{},"sourceType":"module"}