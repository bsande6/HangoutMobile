{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport Chip from '@mui/material/Chip';\nimport TextField from '@mui/material/TextField';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { getValueFromOption } from './filterPanelUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst getSingleSelectOptionFormatter = (_ref, api) => {\n  let {\n    valueFormatter,\n    field\n  } = _ref;\n  return option => {\n    if (typeof option === 'object') {\n      return option.label;\n    }\n\n    return valueFormatter && option !== '' ? valueFormatter({\n      value: option,\n      field,\n      api\n    }) : option;\n  };\n};\n\nconst isOptionEqualToValue = (option, value) => getValueFromOption(option) === getValueFromOption(value);\n\nconst filter = createFilterOptions();\n\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n    item,\n    applyValue,\n    apiRef,\n    focusElementRef\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const id = useId();\n  const resolvedColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;\n  const resolvedValueOptions = React.useMemo(() => {\n    return typeof resolvedColumn.valueOptions === 'function' ? resolvedColumn.valueOptions({\n      field: resolvedColumn.field\n    }) : resolvedColumn.valueOptions;\n  }, [resolvedColumn]);\n  const resolvedFormattedValueOptions = React.useMemo(() => {\n    return resolvedValueOptions.map(getValueFromOption);\n  }, [resolvedValueOptions]);\n  const filterValueOptionFormatter = getSingleSelectOptionFormatter(apiRef.current.getColumn(item.columnField), apiRef.current); // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useSate, the Autocomplete could receive incoherent value and options\n\n  const filterValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n\n    if (resolvedValueOptions !== undefined) {\n      const itemValueIndexes = item.value.map(element => {\n        // get the index matching between values and valueoptions\n        const formattedElement = getValueFromOption(element);\n        const index = resolvedFormattedValueOptions.findIndex(formatedOption => formatedOption === formattedElement);\n        return index;\n      });\n      return itemValueIndexes.filter(index => index >= 0).map(index => resolvedValueOptions[index]);\n    }\n\n    return item.value;\n  }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);\n  React.useEffect(() => {\n    if (!Array.isArray(item.value) || filterValues.length !== item.value.length) {\n      // update the state if the filter value has been cleaned by the component\n      applyValue(_extends({}, item, {\n        value: filterValues.map(getValueFromOption)\n      }));\n    }\n  }, [item, filterValues, applyValue]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: [...value.map(getValueFromOption)]\n    }));\n  }, [applyValue, item]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    freeSolo: false,\n    limitTags: 1,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filterValues,\n    onChange: handleChange,\n    renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n      variant: \"outlined\",\n      size: \"small\",\n      label: filterValueOptionFormatter(option)\n    }, getTagProps({\n      index\n    })))),\n    renderInput: params => /*#__PURE__*/_jsx(TextField, _extends({}, params, {\n      label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n      placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n      InputLabelProps: _extends({}, params.InputLabelProps, {\n        shrink: true\n      }),\n      inputRef: focusElementRef,\n      type: 'singleSelect',\n      variant: \"standard\"\n    }))\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.any.isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","Autocomplete","createFilterOptions","Chip","TextField","unstable_useId","useId","getValueFromOption","jsx","_jsx","getSingleSelectOptionFormatter","api","valueFormatter","field","option","label","value","isOptionEqualToValue","filter","GridFilterInputMultipleSingleSelect","props","item","applyValue","apiRef","focusElementRef","other","id","resolvedColumn","columnField","current","getColumn","resolvedValueOptions","useMemo","valueOptions","resolvedFormattedValueOptions","map","filterValueOptionFormatter","filterValues","Array","isArray","undefined","itemValueIndexes","element","formattedElement","index","findIndex","formatedOption","useEffect","length","handleChange","useCallback","event","multiple","freeSolo","limitTags","options","filterOptions","onChange","renderTags","getTagProps","variant","size","renderInput","params","getLocaleText","placeholder","InputLabelProps","shrink","inputRef","type","process","env","NODE_ENV","propTypes","any","isRequired","func","oneOfType","object","shape","string","number","operatorValue","oneOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport Chip from '@mui/material/Chip';\nimport TextField from '@mui/material/TextField';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { getValueFromOption } from './filterPanelUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst getSingleSelectOptionFormatter = ({\n  valueFormatter,\n  field\n}, api) => option => {\n  if (typeof option === 'object') {\n    return option.label;\n  }\n\n  return valueFormatter && option !== '' ? valueFormatter({\n    value: option,\n    field,\n    api\n  }) : option;\n};\n\nconst isOptionEqualToValue = (option, value) => getValueFromOption(option) === getValueFromOption(value);\n\nconst filter = createFilterOptions();\n\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n    item,\n    applyValue,\n    apiRef,\n    focusElementRef\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const id = useId();\n  const resolvedColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;\n  const resolvedValueOptions = React.useMemo(() => {\n    return typeof resolvedColumn.valueOptions === 'function' ? resolvedColumn.valueOptions({\n      field: resolvedColumn.field\n    }) : resolvedColumn.valueOptions;\n  }, [resolvedColumn]);\n  const resolvedFormattedValueOptions = React.useMemo(() => {\n    return resolvedValueOptions.map(getValueFromOption);\n  }, [resolvedValueOptions]);\n  const filterValueOptionFormatter = getSingleSelectOptionFormatter(apiRef.current.getColumn(item.columnField), apiRef.current); // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useSate, the Autocomplete could receive incoherent value and options\n\n  const filterValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n\n    if (resolvedValueOptions !== undefined) {\n      const itemValueIndexes = item.value.map(element => {\n        // get the index matching between values and valueoptions\n        const formattedElement = getValueFromOption(element);\n        const index = resolvedFormattedValueOptions.findIndex(formatedOption => formatedOption === formattedElement);\n        return index;\n      });\n      return itemValueIndexes.filter(index => index >= 0).map(index => resolvedValueOptions[index]);\n    }\n\n    return item.value;\n  }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);\n  React.useEffect(() => {\n    if (!Array.isArray(item.value) || filterValues.length !== item.value.length) {\n      // update the state if the filter value has been cleaned by the component\n      applyValue(_extends({}, item, {\n        value: filterValues.map(getValueFromOption)\n      }));\n    }\n  }, [item, filterValues, applyValue]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: [...value.map(getValueFromOption)]\n    }));\n  }, [applyValue, item]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    freeSolo: false,\n    limitTags: 1,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filterValues,\n    onChange: handleChange,\n    renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n      variant: \"outlined\",\n      size: \"small\",\n      label: filterValueOptionFormatter(option)\n    }, getTagProps({\n      index\n    })))),\n    renderInput: params => /*#__PURE__*/_jsx(TextField, _extends({}, params, {\n      label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n      placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n      InputLabelProps: _extends({}, params.InputLabelProps, {\n        shrink: true\n      }),\n      inputRef: focusElementRef,\n      type: 'singleSelect',\n      variant: \"standard\"\n    }))\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.any.isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };"]},"metadata":{},"sourceType":"module"}