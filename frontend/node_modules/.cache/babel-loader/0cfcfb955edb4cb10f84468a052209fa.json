{"ast":null,"code":"import * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\n\nconst getFlatRowTree = _ref => {\n  let {\n    ids,\n    idRowsLookup,\n    previousTree\n  } = _ref;\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId]) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: 'none',\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    ids\n  };\n};\n\nexport const useGridRowGroupsPreProcessing = apiRef => {\n  const rowGroupsPreProcessingRef = React.useRef(new Map());\n  const registerRowGroupsBuilder = React.useCallback((processingName, rowGroupingPreProcessing) => {\n    var _rowGroupsPreProcessi;\n\n    const rowGroupingPreProcessingBefore = (_rowGroupsPreProcessi = rowGroupsPreProcessingRef.current.get(processingName)) != null ? _rowGroupsPreProcessi : null;\n\n    if (rowGroupingPreProcessingBefore !== rowGroupingPreProcessing) {\n      rowGroupsPreProcessingRef.current.set(processingName, rowGroupingPreProcessing);\n      apiRef.current.publishEvent(GridEvents.rowGroupsPreProcessingChange);\n    }\n  }, [apiRef]);\n  const groupRows = React.useCallback(function () {\n    let response = null;\n    const preProcessingList = Array.from(rowGroupsPreProcessingRef.current.values());\n\n    while (!response && preProcessingList.length) {\n      const preProcessing = preProcessingList.shift();\n\n      if (preProcessing) {\n        response = preProcessing(...arguments);\n      }\n    }\n\n    if (!response) {\n      return getFlatRowTree(...arguments);\n    }\n\n    return response;\n  }, []);\n  const rowGroupsPreProcessingApi = {\n    unstable_registerRowGroupsBuilder: registerRowGroupsBuilder,\n    unstable_groupRows: groupRows\n  };\n  useGridApiMethod(apiRef, rowGroupsPreProcessingApi, 'GridRowGroupsPreProcessing');\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/core/rowGroupsPreProcessing/useGridRowGroupsPreProcessing.js"],"names":["React","GridEvents","useGridApiMethod","getFlatRowTree","ids","idRowsLookup","previousTree","tree","i","length","rowId","id","depth","parent","groupingKey","groupingField","groupingName","treeDepth","useGridRowGroupsPreProcessing","apiRef","rowGroupsPreProcessingRef","useRef","Map","registerRowGroupsBuilder","useCallback","processingName","rowGroupingPreProcessing","_rowGroupsPreProcessi","rowGroupingPreProcessingBefore","current","get","set","publishEvent","rowGroupsPreProcessingChange","groupRows","response","preProcessingList","Array","from","values","preProcessing","shift","rowGroupsPreProcessingApi","unstable_registerRowGroupsBuilder","unstable_groupRows"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;AAEA,MAAMC,cAAc,GAAG,QAIjB;AAAA,MAJkB;AACtBC,IAAAA,GADsB;AAEtBC,IAAAA,YAFsB;AAGtBC,IAAAA;AAHsB,GAIlB;AACJ,QAAMC,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtC,UAAME,KAAK,GAAGN,GAAG,CAACI,CAAD,CAAjB;;AAEA,QAAIF,YAAY,IAAIA,YAAY,CAACI,KAAD,CAAhC,EAAyC;AACvCH,MAAAA,IAAI,CAACG,KAAD,CAAJ,GAAcJ,YAAY,CAACI,KAAD,CAA1B;AACD,KAFD,MAEO;AACLH,MAAAA,IAAI,CAACG,KAAD,CAAJ,GAAc;AACZC,QAAAA,EAAE,EAAED,KADQ;AAEZE,QAAAA,KAAK,EAAE,CAFK;AAGZC,QAAAA,MAAM,EAAE,IAHI;AAIZC,QAAAA,WAAW,EAAE,EAJD;AAKZC,QAAAA,aAAa,EAAE;AALH,OAAd;AAOD;AACF;;AAED,SAAO;AACLC,IAAAA,YAAY,EAAE,MADT;AAELT,IAAAA,IAFK;AAGLU,IAAAA,SAAS,EAAE,CAHN;AAILZ,IAAAA,YAJK;AAKLD,IAAAA;AALK,GAAP;AAOD,CA9BD;;AAgCA,OAAO,MAAMc,6BAA6B,GAAGC,MAAM,IAAI;AACrD,QAAMC,yBAAyB,GAAGpB,KAAK,CAACqB,MAAN,CAAa,IAAIC,GAAJ,EAAb,CAAlC;AACA,QAAMC,wBAAwB,GAAGvB,KAAK,CAACwB,WAAN,CAAkB,CAACC,cAAD,EAAiBC,wBAAjB,KAA8C;AAC/F,QAAIC,qBAAJ;;AAEA,UAAMC,8BAA8B,GAAG,CAACD,qBAAqB,GAAGP,yBAAyB,CAACS,OAA1B,CAAkCC,GAAlC,CAAsCL,cAAtC,CAAzB,KAAmF,IAAnF,GAA0FE,qBAA1F,GAAkH,IAAzJ;;AAEA,QAAIC,8BAA8B,KAAKF,wBAAvC,EAAiE;AAC/DN,MAAAA,yBAAyB,CAACS,OAA1B,CAAkCE,GAAlC,CAAsCN,cAAtC,EAAsDC,wBAAtD;AACAP,MAAAA,MAAM,CAACU,OAAP,CAAeG,YAAf,CAA4B/B,UAAU,CAACgC,4BAAvC;AACD;AACF,GATgC,EAS9B,CAACd,MAAD,CAT8B,CAAjC;AAUA,QAAMe,SAAS,GAAGlC,KAAK,CAACwB,WAAN,CAAkB,YAAe;AACjD,QAAIW,QAAQ,GAAG,IAAf;AACA,UAAMC,iBAAiB,GAAGC,KAAK,CAACC,IAAN,CAAWlB,yBAAyB,CAACS,OAA1B,CAAkCU,MAAlC,EAAX,CAA1B;;AAEA,WAAO,CAACJ,QAAD,IAAaC,iBAAiB,CAAC3B,MAAtC,EAA8C;AAC5C,YAAM+B,aAAa,GAAGJ,iBAAiB,CAACK,KAAlB,EAAtB;;AAEA,UAAID,aAAJ,EAAmB;AACjBL,QAAAA,QAAQ,GAAGK,aAAa,CAAC,YAAD,CAAxB;AACD;AACF;;AAED,QAAI,CAACL,QAAL,EAAe;AACb,aAAOhC,cAAc,CAAC,YAAD,CAArB;AACD;;AAED,WAAOgC,QAAP;AACD,GAjBiB,EAiBf,EAjBe,CAAlB;AAkBA,QAAMO,yBAAyB,GAAG;AAChCC,IAAAA,iCAAiC,EAAEpB,wBADH;AAEhCqB,IAAAA,kBAAkB,EAAEV;AAFY,GAAlC;AAIAhC,EAAAA,gBAAgB,CAACiB,MAAD,EAASuB,yBAAT,EAAoC,4BAApC,CAAhB;AACD,CAnCM","sourcesContent":["import * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\n\nconst getFlatRowTree = ({\n  ids,\n  idRowsLookup,\n  previousTree\n}) => {\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId]) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: 'none',\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    ids\n  };\n};\n\nexport const useGridRowGroupsPreProcessing = apiRef => {\n  const rowGroupsPreProcessingRef = React.useRef(new Map());\n  const registerRowGroupsBuilder = React.useCallback((processingName, rowGroupingPreProcessing) => {\n    var _rowGroupsPreProcessi;\n\n    const rowGroupingPreProcessingBefore = (_rowGroupsPreProcessi = rowGroupsPreProcessingRef.current.get(processingName)) != null ? _rowGroupsPreProcessi : null;\n\n    if (rowGroupingPreProcessingBefore !== rowGroupingPreProcessing) {\n      rowGroupsPreProcessingRef.current.set(processingName, rowGroupingPreProcessing);\n      apiRef.current.publishEvent(GridEvents.rowGroupsPreProcessingChange);\n    }\n  }, [apiRef]);\n  const groupRows = React.useCallback((...params) => {\n    let response = null;\n    const preProcessingList = Array.from(rowGroupsPreProcessingRef.current.values());\n\n    while (!response && preProcessingList.length) {\n      const preProcessing = preProcessingList.shift();\n\n      if (preProcessing) {\n        response = preProcessing(...params);\n      }\n    }\n\n    if (!response) {\n      return getFlatRowTree(...params);\n    }\n\n    return response;\n  }, []);\n  const rowGroupsPreProcessingApi = {\n    unstable_registerRowGroupsBuilder: registerRowGroupsBuilder,\n    unstable_groupRows: groupRows\n  };\n  useGridApiMethod(apiRef, rowGroupsPreProcessingApi, 'GridRowGroupsPreProcessing');\n};"]},"metadata":{},"sourceType":"module"}