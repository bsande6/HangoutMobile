{"ast":null,"code":"import * as React from 'react';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { gridPageSelector, gridPageSizeSelector } from '../pagination/gridPaginationSelector';\nimport { gridRowCountSelector } from '../rows/gridRowsSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridNativeEventListener } from '../../utils/useGridNativeEventListener'; // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\n\nfunction scrollIntoView(dimensions) {\n  const {\n    clientHeight,\n    scrollTop,\n    offsetHeight,\n    offsetTop\n  } = dimensions;\n  const elementBottom = offsetTop + offsetHeight;\n\n  if (elementBottom - clientHeight > scrollTop) {\n    return elementBottom - clientHeight;\n  }\n\n  if (offsetTop < scrollTop) {\n    return offsetTop;\n  }\n\n  return undefined;\n}\n/**\n * @requires useGridPagination (state) - can be after, async only\n * @requires useGridColumns (state) - can be after, async only\n * @requires useGridRows (state) - can be after, async only\n * @requires useGridRowsMeta (state) - can be after, async only\n */\n\n\nexport const useGridScroll = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridScroll');\n  const colRef = apiRef.current.columnHeadersElementRef;\n  const windowRef = apiRef.current.windowRef;\n  const scrollToIndexes = React.useCallback(params => {\n    const totalRowCount = gridRowCountSelector(apiRef);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (totalRowCount === 0 || visibleColumns.length === 0) {\n      return false;\n    }\n\n    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);\n    let scrollCoordinates = {};\n\n    if (params.colIndex != null) {\n      const columnPositions = gridColumnPositionsSelector(apiRef);\n      scrollCoordinates.left = scrollIntoView({\n        clientHeight: windowRef.current.clientWidth,\n        scrollTop: windowRef.current.scrollLeft,\n        offsetHeight: visibleColumns[params.colIndex].computedWidth,\n        offsetTop: columnPositions[params.colIndex]\n      });\n    }\n\n    if (params.rowIndex != null) {\n      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n      const page = gridPageSelector(apiRef);\n      const pageSize = gridPageSizeSelector(apiRef);\n      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;\n      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];\n      scrollCoordinates.top = scrollIntoView({\n        clientHeight: windowRef.current.clientHeight,\n        scrollTop: windowRef.current.scrollTop,\n        offsetHeight: targetOffsetHeight,\n        offsetTop: rowsMeta.positions[elementIndex]\n      });\n    }\n\n    scrollCoordinates = apiRef.current.unstable_applyPreProcessors('scrollToIndexes', scrollCoordinates, params);\n\n    if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {\n      apiRef.current.scroll(scrollCoordinates);\n      return true;\n    }\n\n    return false;\n  }, [logger, apiRef, windowRef, props.pagination]);\n  const scroll = React.useCallback(params => {\n    if (windowRef.current && params.left != null && colRef.current) {\n      colRef.current.scrollLeft = params.left;\n      windowRef.current.scrollLeft = params.left;\n      logger.debug(`Scrolling left: ${params.left}`);\n    }\n\n    if (windowRef.current && params.top != null) {\n      windowRef.current.scrollTop = params.top;\n      logger.debug(`Scrolling top: ${params.top}`);\n    }\n\n    logger.debug(`Scrolling, updating container, and viewport`);\n  }, [windowRef, colRef, logger]);\n  const getScrollPosition = React.useCallback(() => {\n    if (!(windowRef != null && windowRef.current)) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n\n    return {\n      top: windowRef.current.scrollTop,\n      left: windowRef.current.scrollLeft\n    };\n  }, [windowRef]);\n  const scrollApi = {\n    scroll,\n    scrollToIndexes,\n    getScrollPosition\n  };\n  useGridApiMethod(apiRef, scrollApi, 'GridScrollApi');\n  const preventScroll = React.useCallback(event => {\n    event.target.scrollLeft = 0;\n    event.target.scrollTop = 0;\n  }, []);\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current, _apiRef$current$rende, _apiRef$current$rende2;\n\n    return (_apiRef$current = apiRef.current) == null ? void 0 : (_apiRef$current$rende = _apiRef$current.renderingZoneRef) == null ? void 0 : (_apiRef$current$rende2 = _apiRef$current$rende.current) == null ? void 0 : _apiRef$current$rende2.parentElement;\n  }, 'scroll', preventScroll);\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.js"],"names":["React","useGridLogger","gridColumnPositionsSelector","gridVisibleColumnDefinitionsSelector","gridPageSelector","gridPageSizeSelector","gridRowCountSelector","gridRowsMetaSelector","useGridApiMethod","useGridNativeEventListener","scrollIntoView","dimensions","clientHeight","scrollTop","offsetHeight","offsetTop","elementBottom","undefined","useGridScroll","apiRef","props","logger","colRef","current","columnHeadersElementRef","windowRef","scrollToIndexes","useCallback","params","totalRowCount","visibleColumns","length","debug","rowIndex","colIndex","scrollCoordinates","columnPositions","left","clientWidth","scrollLeft","computedWidth","rowsMeta","state","page","pageSize","elementIndex","pagination","targetOffsetHeight","positions","currentPageTotalHeight","top","unstable_applyPreProcessors","scroll","getScrollPosition","scrollApi","preventScroll","event","target","_apiRef$current","_apiRef$current$rende","_apiRef$current$rende2","renderingZoneRef","parentElement"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { gridPageSelector, gridPageSizeSelector } from '../pagination/gridPaginationSelector';\nimport { gridRowCountSelector } from '../rows/gridRowsSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridNativeEventListener } from '../../utils/useGridNativeEventListener'; // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\n\nfunction scrollIntoView(dimensions) {\n  const {\n    clientHeight,\n    scrollTop,\n    offsetHeight,\n    offsetTop\n  } = dimensions;\n  const elementBottom = offsetTop + offsetHeight;\n\n  if (elementBottom - clientHeight > scrollTop) {\n    return elementBottom - clientHeight;\n  }\n\n  if (offsetTop < scrollTop) {\n    return offsetTop;\n  }\n\n  return undefined;\n}\n/**\n * @requires useGridPagination (state) - can be after, async only\n * @requires useGridColumns (state) - can be after, async only\n * @requires useGridRows (state) - can be after, async only\n * @requires useGridRowsMeta (state) - can be after, async only\n */\n\n\nexport const useGridScroll = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridScroll');\n  const colRef = apiRef.current.columnHeadersElementRef;\n  const windowRef = apiRef.current.windowRef;\n  const scrollToIndexes = React.useCallback(params => {\n    const totalRowCount = gridRowCountSelector(apiRef);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (totalRowCount === 0 || visibleColumns.length === 0) {\n      return false;\n    }\n\n    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);\n    let scrollCoordinates = {};\n\n    if (params.colIndex != null) {\n      const columnPositions = gridColumnPositionsSelector(apiRef);\n      scrollCoordinates.left = scrollIntoView({\n        clientHeight: windowRef.current.clientWidth,\n        scrollTop: windowRef.current.scrollLeft,\n        offsetHeight: visibleColumns[params.colIndex].computedWidth,\n        offsetTop: columnPositions[params.colIndex]\n      });\n    }\n\n    if (params.rowIndex != null) {\n      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n      const page = gridPageSelector(apiRef);\n      const pageSize = gridPageSizeSelector(apiRef);\n      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;\n      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];\n      scrollCoordinates.top = scrollIntoView({\n        clientHeight: windowRef.current.clientHeight,\n        scrollTop: windowRef.current.scrollTop,\n        offsetHeight: targetOffsetHeight,\n        offsetTop: rowsMeta.positions[elementIndex]\n      });\n    }\n\n    scrollCoordinates = apiRef.current.unstable_applyPreProcessors('scrollToIndexes', scrollCoordinates, params);\n\n    if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {\n      apiRef.current.scroll(scrollCoordinates);\n      return true;\n    }\n\n    return false;\n  }, [logger, apiRef, windowRef, props.pagination]);\n  const scroll = React.useCallback(params => {\n    if (windowRef.current && params.left != null && colRef.current) {\n      colRef.current.scrollLeft = params.left;\n      windowRef.current.scrollLeft = params.left;\n      logger.debug(`Scrolling left: ${params.left}`);\n    }\n\n    if (windowRef.current && params.top != null) {\n      windowRef.current.scrollTop = params.top;\n      logger.debug(`Scrolling top: ${params.top}`);\n    }\n\n    logger.debug(`Scrolling, updating container, and viewport`);\n  }, [windowRef, colRef, logger]);\n  const getScrollPosition = React.useCallback(() => {\n    if (!(windowRef != null && windowRef.current)) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n\n    return {\n      top: windowRef.current.scrollTop,\n      left: windowRef.current.scrollLeft\n    };\n  }, [windowRef]);\n  const scrollApi = {\n    scroll,\n    scrollToIndexes,\n    getScrollPosition\n  };\n  useGridApiMethod(apiRef, scrollApi, 'GridScrollApi');\n  const preventScroll = React.useCallback(event => {\n    event.target.scrollLeft = 0;\n    event.target.scrollTop = 0;\n  }, []);\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current, _apiRef$current$rende, _apiRef$current$rende2;\n\n    return (_apiRef$current = apiRef.current) == null ? void 0 : (_apiRef$current$rende = _apiRef$current.renderingZoneRef) == null ? void 0 : (_apiRef$current$rende2 = _apiRef$current$rende.current) == null ? void 0 : _apiRef$current$rende2.parentElement;\n  }, 'scroll', preventScroll);\n};"]},"metadata":{},"sourceType":"module"}