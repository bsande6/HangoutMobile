{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isPrintableKey, isCellEnterEditModeKeys, isCellExitEditModeKeys, isCellEditCommitKeys, isDeleteKeys } from '../../../utils/keyboardUtils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\n\nfunction isPromise(promise) {\n  return typeof promise.then === 'function';\n}\n\nexport const useCellEditing = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n\n  const buildCallback = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n\n  const setCellMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) === mode) {\n      return;\n    }\n\n    logger.debug(`Switching cell id: ${id} field: ${field} to mode: ${mode}`);\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      newEditRowsState[id] = _extends({}, newEditRowsState[id]);\n\n      if (mode === GridCellModes.Edit) {\n        newEditRowsState[id][field] = {\n          value: apiRef.current.getCellValue(id, field)\n        };\n      } else {\n        delete newEditRowsState[id][field];\n\n        if (!Object.keys(newEditRowsState[id]).length) {\n          delete newEditRowsState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent(GridEvents.cellModeChange, apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const getCellMode = React.useCallback((id, field) => {\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editRowsState[id] && editRowsState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]); // TODO v6: it should always return a promise\n\n  const commitCellChange = React.useCallback(function (params) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _props$experimentalFe;\n\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueChangeDebounce(id, field);\n    const model = apiRef.current.getEditRowsModel();\n\n    if (!model[id] || !model[id][field]) {\n      throw new Error(`MUI: Cell at id: ${id} and field: ${field} is not in edit mode.`);\n    }\n\n    const editCellProps = model[id][field];\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const cellProps = model[id][field];\n\n      if (cellProps.isValidating || cellProps.error) {\n        return false;\n      }\n    }\n\n    const commitParams = _extends({}, params, {\n      value: editCellProps.value\n    });\n\n    let hasError = !!editCellProps.error;\n\n    if (!hasError && typeof column.preProcessEditCellProps === 'function') {\n      const result = column.preProcessEditCellProps({\n        id,\n        row,\n        props: editCellProps\n      });\n\n      if (isPromise(result)) {\n        return result.then(newEditCellProps => {\n          apiRef.current.unstable_setEditCellProps({\n            id,\n            field,\n            props: newEditCellProps\n          });\n\n          if (newEditCellProps.error) {\n            return false;\n          }\n\n          apiRef.current.publishEvent(GridEvents.cellEditCommit, commitParams, event);\n          return true;\n        });\n      }\n\n      apiRef.current.unstable_setEditCellProps({\n        id,\n        field,\n        props: result\n      });\n      hasError = !!result.error;\n    }\n\n    if (!hasError) {\n      apiRef.current.publishEvent(GridEvents.cellEditCommit, commitParams, event);\n      return true;\n    }\n\n    return false;\n  }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setCellEditingEditCellValue = React.useCallback(params => {\n    const column = apiRef.current.getColumn(params.field);\n    const row = apiRef.current.getRow(params.id);\n    return new Promise(resolve => {\n      let newEditCellProps = {\n        value: params.value\n      };\n      const model = apiRef.current.getEditRowsModel();\n      const editCellProps = model[params.id][params.field];\n\n      if (typeof column.preProcessEditCellProps !== 'function') {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n        resolve(true);\n        return;\n      } // setEditCellProps runs the value parser and returns the updated props\n\n\n      newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: _extends({}, editCellProps, {\n          isValidating: true\n        })\n      }));\n      Promise.resolve(column.preProcessEditCellProps({\n        id: params.id,\n        row,\n        props: _extends({}, newEditCellProps, {\n          value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)\n        })\n      })).then(newEditCellPropsProcessed => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: _extends({}, newEditCellPropsProcessed, {\n            isValidating: false\n          })\n        }));\n        resolve(!newEditCellPropsProcessed.error);\n      });\n    });\n  }, [apiRef]);\n  const cellEditingApi = {\n    setCellMode,\n    getCellMode,\n    commitCellChange,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, cellEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      id,\n      field,\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;\n\n    if (!isEditMode && isCellEnterEditModeKeys(event.key) && !isModifierKeyPressed && !(event.key === ' ' && event.shiftKey)) {\n      apiRef.current.publishEvent(GridEvents.cellEditStart, params, event);\n    }\n\n    if (!isEditMode && isDeleteKeys(event.key)) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      });\n      apiRef.current.commitCellChange({\n        id,\n        field\n      }, event);\n      apiRef.current.publishEvent(GridEvents.cellEditStop, params, event);\n    }\n\n    if (isEditMode && isCellEditCommitKeys(event.key)) {\n      const commitParams = {\n        id,\n        field\n      };\n      const isValid = await apiRef.current.commitCellChange(commitParams, event);\n\n      if (!isValid) {\n        return;\n      }\n    }\n\n    if (isEditMode && isCellExitEditModeKeys(event.key)) {\n      apiRef.current.publishEvent(GridEvents.cellEditStop, params, event);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.publishEvent(GridEvents.cellEditStart, params, event);\n  }, [apiRef]);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    await apiRef.current.commitCellChange(params, event);\n    apiRef.current.publishEvent(GridEvents.cellEditStop, params, event);\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  const handleCellEditStart = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);\n\n    if (isKeyboardEvent(event) && isPrintableKey(event.key)) {\n      apiRef.current.unstable_setEditCellProps({\n        id: params.id,\n        field: params.field,\n        props: {\n          value: ''\n        }\n      });\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback((params, event) => {\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);\n\n    if (!isKeyboardEvent(event)) {\n      return;\n    }\n\n    if (isCellEditCommitKeys(event.key)) {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n      return;\n    }\n\n    if (event.key === 'Escape' || isDeleteKeys(event.key)) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleCellEditCommit = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    const model = apiRef.current.getEditRowsModel();\n    const {\n      value\n    } = model[id][field];\n    logger.debug(`Setting cell id: ${id} field: ${field} to value: ${value == null ? void 0 : value.toString()}`);\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      const column = apiRef.current.getColumn(params.field);\n\n      let rowUpdate = _extends({}, row, {\n        [field]: value\n      });\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          row,\n          value\n        });\n      }\n\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef, logger]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const column = apiRef.current.getColumn(params.field);\n    const editCellProps = column.preProcessEditCellProps ? column.preProcessEditCellProps({\n      id: params.id,\n      row,\n      props: params.props\n    }) : params.props;\n\n    if (isPromise(editCellProps)) {\n      editCellProps.then(newEditCellProps => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n      });\n    } else {\n      apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: editCellProps\n      }));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStart, buildCallback(handleCellEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStop, buildCallback(handleCellEditStop));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditCommit, buildCallback(handleCellEditCommit));\n  useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditCommit, props.onCellEditCommit);\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStart, props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStop, props.onCellEditStop);\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.js"],"names":["_extends","React","useEventCallback","useGridApiOptionHandler","useGridApiEventHandler","GridEvents","GridCellModes","GridEditModes","isKeyboardEvent","isPrintableKey","isCellEnterEditModeKeys","isCellExitEditModeKeys","isCellEditCommitKeys","isDeleteKeys","useGridLogger","gridFocusCellSelector","useGridApiMethod","gridEditRowsStateSelector","isPromise","promise","then","useCellEditing","apiRef","props","_props$experimentalFe2","logger","buildCallback","callback","editMode","Cell","setCellMode","useCallback","id","field","mode","current","getCellMode","debug","setState","state","newEditRowsState","editRows","Edit","value","getCellValue","Object","keys","length","forceUpdate","publishEvent","cellModeChange","getCellParams","editRowsState","isEditing","View","commitCellChange","params","event","_props$experimentalFe","unstable_runPendingEditCellValueChangeDebounce","model","getEditRowsModel","Error","editCellProps","column","getColumn","row","getRow","experimentalFeatures","preventCommitWhileValidating","cellProps","isValidating","error","commitParams","hasError","preProcessEditCellProps","result","newEditCellProps","unstable_setEditCellProps","cellEditCommit","setCellEditingEditCellValue","Promise","resolve","unstable_parseValue","newEditCellPropsProcessed","cellEditingApi","unstable_setCellEditingEditCellValue","handleCellKeyDown","cellMode","isEditable","isEditMode","isModifierKeyPressed","ctrlKey","metaKey","altKey","key","shiftKey","cellEditStart","setEditCellValue","cellEditStop","isValid","handleCellDoubleClick","commitPropsAndExit","handleCellFocusOut","handleColumnHeaderDragStart","cell","handleCellEditStart","handleCellEditStop","cellNavigationKeyDown","setCellFocus","handleCellEditCommit","toString","rowUpdate","valueSetter","updateRows","handleEditCellPropsChange","cellKeyDown","cellDoubleClick","cellFocusOut","columnHeaderDragStart","editCellPropsChange","onCellEditCommit","onCellEditStart","onCellEditStop"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isPrintableKey, isCellEnterEditModeKeys, isCellExitEditModeKeys, isCellEditCommitKeys, isDeleteKeys } from '../../../utils/keyboardUtils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\n\nfunction isPromise(promise) {\n  return typeof promise.then === 'function';\n}\n\nexport const useCellEditing = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n\n  const buildCallback = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const setCellMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) === mode) {\n      return;\n    }\n\n    logger.debug(`Switching cell id: ${id} field: ${field} to mode: ${mode}`);\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      newEditRowsState[id] = _extends({}, newEditRowsState[id]);\n\n      if (mode === GridCellModes.Edit) {\n        newEditRowsState[id][field] = {\n          value: apiRef.current.getCellValue(id, field)\n        };\n      } else {\n        delete newEditRowsState[id][field];\n\n        if (!Object.keys(newEditRowsState[id]).length) {\n          delete newEditRowsState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent(GridEvents.cellModeChange, apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const getCellMode = React.useCallback((id, field) => {\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editRowsState[id] && editRowsState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]); // TODO v6: it should always return a promise\n\n  const commitCellChange = React.useCallback((params, event = {}) => {\n    var _props$experimentalFe;\n\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueChangeDebounce(id, field);\n    const model = apiRef.current.getEditRowsModel();\n\n    if (!model[id] || !model[id][field]) {\n      throw new Error(`MUI: Cell at id: ${id} and field: ${field} is not in edit mode.`);\n    }\n\n    const editCellProps = model[id][field];\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const cellProps = model[id][field];\n\n      if (cellProps.isValidating || cellProps.error) {\n        return false;\n      }\n    }\n\n    const commitParams = _extends({}, params, {\n      value: editCellProps.value\n    });\n\n    let hasError = !!editCellProps.error;\n\n    if (!hasError && typeof column.preProcessEditCellProps === 'function') {\n      const result = column.preProcessEditCellProps({\n        id,\n        row,\n        props: editCellProps\n      });\n\n      if (isPromise(result)) {\n        return result.then(newEditCellProps => {\n          apiRef.current.unstable_setEditCellProps({\n            id,\n            field,\n            props: newEditCellProps\n          });\n\n          if (newEditCellProps.error) {\n            return false;\n          }\n\n          apiRef.current.publishEvent(GridEvents.cellEditCommit, commitParams, event);\n          return true;\n        });\n      }\n\n      apiRef.current.unstable_setEditCellProps({\n        id,\n        field,\n        props: result\n      });\n      hasError = !!result.error;\n    }\n\n    if (!hasError) {\n      apiRef.current.publishEvent(GridEvents.cellEditCommit, commitParams, event);\n      return true;\n    }\n\n    return false;\n  }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setCellEditingEditCellValue = React.useCallback(params => {\n    const column = apiRef.current.getColumn(params.field);\n    const row = apiRef.current.getRow(params.id);\n    return new Promise(resolve => {\n      let newEditCellProps = {\n        value: params.value\n      };\n      const model = apiRef.current.getEditRowsModel();\n      const editCellProps = model[params.id][params.field];\n\n      if (typeof column.preProcessEditCellProps !== 'function') {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n        resolve(true);\n        return;\n      } // setEditCellProps runs the value parser and returns the updated props\n\n\n      newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: _extends({}, editCellProps, {\n          isValidating: true\n        })\n      }));\n      Promise.resolve(column.preProcessEditCellProps({\n        id: params.id,\n        row,\n        props: _extends({}, newEditCellProps, {\n          value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)\n        })\n      })).then(newEditCellPropsProcessed => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: _extends({}, newEditCellPropsProcessed, {\n            isValidating: false\n          })\n        }));\n        resolve(!newEditCellPropsProcessed.error);\n      });\n    });\n  }, [apiRef]);\n  const cellEditingApi = {\n    setCellMode,\n    getCellMode,\n    commitCellChange,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, cellEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      id,\n      field,\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;\n\n    if (!isEditMode && isCellEnterEditModeKeys(event.key) && !isModifierKeyPressed && !(event.key === ' ' && event.shiftKey)) {\n      apiRef.current.publishEvent(GridEvents.cellEditStart, params, event);\n    }\n\n    if (!isEditMode && isDeleteKeys(event.key)) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      });\n      apiRef.current.commitCellChange({\n        id,\n        field\n      }, event);\n      apiRef.current.publishEvent(GridEvents.cellEditStop, params, event);\n    }\n\n    if (isEditMode && isCellEditCommitKeys(event.key)) {\n      const commitParams = {\n        id,\n        field\n      };\n      const isValid = await apiRef.current.commitCellChange(commitParams, event);\n\n      if (!isValid) {\n        return;\n      }\n    }\n\n    if (isEditMode && isCellExitEditModeKeys(event.key)) {\n      apiRef.current.publishEvent(GridEvents.cellEditStop, params, event);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.publishEvent(GridEvents.cellEditStart, params, event);\n  }, [apiRef]);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    await apiRef.current.commitCellChange(params, event);\n    apiRef.current.publishEvent(GridEvents.cellEditStop, params, event);\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  const handleCellEditStart = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);\n\n    if (isKeyboardEvent(event) && isPrintableKey(event.key)) {\n      apiRef.current.unstable_setEditCellProps({\n        id: params.id,\n        field: params.field,\n        props: {\n          value: ''\n        }\n      });\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback((params, event) => {\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);\n\n    if (!isKeyboardEvent(event)) {\n      return;\n    }\n\n    if (isCellEditCommitKeys(event.key)) {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n      return;\n    }\n\n    if (event.key === 'Escape' || isDeleteKeys(event.key)) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleCellEditCommit = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    const model = apiRef.current.getEditRowsModel();\n    const {\n      value\n    } = model[id][field];\n    logger.debug(`Setting cell id: ${id} field: ${field} to value: ${value == null ? void 0 : value.toString()}`);\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      const column = apiRef.current.getColumn(params.field);\n\n      let rowUpdate = _extends({}, row, {\n        [field]: value\n      });\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          row,\n          value\n        });\n      }\n\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef, logger]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const column = apiRef.current.getColumn(params.field);\n    const editCellProps = column.preProcessEditCellProps ? column.preProcessEditCellProps({\n      id: params.id,\n      row,\n      props: params.props\n    }) : params.props;\n\n    if (isPromise(editCellProps)) {\n      editCellProps.then(newEditCellProps => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n      });\n    } else {\n      apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: editCellProps\n      }));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStart, buildCallback(handleCellEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStop, buildCallback(handleCellEditStop));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditCommit, buildCallback(handleCellEditCommit));\n  useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditCommit, props.onCellEditCommit);\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStart, props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStop, props.onCellEditStop);\n};"]},"metadata":{},"sourceType":"module"}