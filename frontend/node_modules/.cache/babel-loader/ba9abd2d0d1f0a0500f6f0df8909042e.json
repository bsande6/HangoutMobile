{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFilteredSortedRowIdsSelector } from '../filter';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport } from './utils';\n\nconst defaultGetRowsToExport = _ref => {\n  let {\n    apiRef\n  } = _ref;\n  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);\n  const selectedRows = apiRef.current.getSelectedRows();\n\n  if (selectedRows.size > 0) {\n    return filteredSortedRowIds.filter(id => selectedRows.has(id));\n  }\n\n  return filteredSortedRowIds;\n};\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\n\n\nexport const useGridCsvExport = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const getDataAsCsv = React.useCallback(function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _options$getRowsToExp, _options$includeHeade;\n\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      getCellParams: apiRef.current.getCellParams,\n      delimiterCharacter: options.delimiter || ',',\n      includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true\n    });\n  }, [logger, apiRef]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'GridCsvExportApi');\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js"],"names":["React","useGridApiMethod","gridFilteredSortedRowIdsSelector","useGridLogger","exportAs","buildCSV","getColumnsToExport","defaultGetRowsToExport","apiRef","filteredSortedRowIds","selectedRows","current","getSelectedRows","size","filter","id","has","useGridCsvExport","logger","getDataAsCsv","useCallback","options","_options$getRowsToExp","_options$includeHeade","debug","exportedColumns","getRowsToExport","exportedRowIds","columns","rowIds","getCellParams","delimiterCharacter","delimiter","includeHeaders","exportDataAsCsv","csv","blob","Blob","utf8WithBom","Uint8Array","type","fileName","csvExportApi"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFilteredSortedRowIdsSelector } from '../filter';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport } from './utils';\n\nconst defaultGetRowsToExport = ({\n  apiRef\n}) => {\n  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);\n  const selectedRows = apiRef.current.getSelectedRows();\n\n  if (selectedRows.size > 0) {\n    return filteredSortedRowIds.filter(id => selectedRows.has(id));\n  }\n\n  return filteredSortedRowIds;\n};\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\n\n\nexport const useGridCsvExport = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    var _options$getRowsToExp, _options$includeHeade;\n\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      getCellParams: apiRef.current.getCellParams,\n      delimiterCharacter: options.delimiter || ',',\n      includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true\n    });\n  }, [logger, apiRef]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'GridCsvExportApi');\n};"]},"metadata":{},"sourceType":"module"}