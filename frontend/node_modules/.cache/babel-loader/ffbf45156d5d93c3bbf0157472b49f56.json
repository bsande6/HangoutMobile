{"ast":null,"code":"'use strict';\n/** Used as references for various `Number` constants. */\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Used to detect unsigned integer values. */\n\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\n\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n\nexport default isIndex;","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/lib/lodash/_isIndex.js"],"names":["MAX_SAFE_INTEGER","reIsUint","isIndex","value","length","type","test"],"mappings":"AAAA;AACA;;AAEA,IAAIA,gBAAgB,GAAG,gBAAvB;AACA;;AAEA,IAAIC,QAAQ,GAAG,kBAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIC,IAAI,GAAG,OAAOF,KAAlB;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAV,GAAiBJ,gBAAjB,GAAoCI,MAA7C;AACA,SAAO,CAAC,CAACA,MAAF,KAAaC,IAAI,IAAI,QAAR,IAAoBA,IAAI,IAAI,QAAR,IAAoBJ,QAAQ,CAACK,IAAT,CAAcH,KAAd,CAArD,KAA8EA,KAAK,GAAG,CAAC,CAAvF,IAA4FA,KAAK,GAAG,CAAR,IAAa,CAAzG,IAA8GA,KAAK,GAAGC,MAA7H;AACD;;AAED,eAAeF,OAAf","sourcesContent":["'use strict';\n/** Used as references for various `Number` constants. */\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Used to detect unsigned integer values. */\n\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\n\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n\nexport default isIndex;"]},"metadata":{},"sourceType":"module"}