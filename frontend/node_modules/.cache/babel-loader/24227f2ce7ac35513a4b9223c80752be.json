{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridColumnHeaders = props => {\n  const {\n    innerRef: innerRefProp,\n    minColumnIndex = 0\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  const rootProps = useGridRootProps();\n  const innerRef = React.useRef(null);\n  const handleInnerRef = useForkRef(innerRefProp, innerRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const prevScrollLeft = React.useRef(0);\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]);\n  const updateInnerPosition = React.useCallback(nextRenderContext => {\n    const firstColumnToRender = Math.max(nextRenderContext.firstColumnIndex - rootProps.columnBuffer, minColumnIndex);\n    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer]);\n  const handleScroll = React.useCallback(_ref => {\n    let {\n      left,\n      renderContext: nextRenderContext = null\n    } = _ref;\n\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      setRenderContext(nextRenderContext);\n      prevRenderContext.current = nextRenderContext;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStart, handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStop, handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragEnd, handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, GridEvents.rowsScroll, handleScroll);\n\n  const getColumns = function (params) {\n    let other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      renderContext: nextRenderContext = renderContext,\n      minFirstColumn = minColumnIndex,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    const columns = [];\n    const firstColumnToRender = Math.max(nextRenderContext.firstColumnIndex - rootProps.columnBuffer, minFirstColumn);\n    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const column = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      const open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === columns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), i));\n    }\n\n    return columns;\n  };\n\n  const rootStyle = {\n    minHeight: headerHeight,\n    maxHeight: headerHeight,\n    lineHeight: `${headerHeight}px`\n  };\n  return {\n    renderContext,\n    getColumns,\n    isDragging: !!dragCol,\n    updateInnerPosition,\n    getRootProps: function () {\n      let other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        style: rootStyle\n      }, other);\n    },\n    getInnerProps: () => ({\n      ref: handleInnerRef,\n      'aria-rowindex': 1,\n      role: 'row'\n    })\n  };\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js"],"names":["_extends","React","useForkRef","useGridApiContext","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","gridTabIndexColumnHeaderSelector","gridTabIndexCellSelector","gridFocusColumnHeaderSelector","gridDensityHeaderHeightSelector","gridFilterActiveItemsLookupSelector","gridSortColumnLookupSelector","gridColumnMenuSelector","useGridRootProps","useGridApiEventHandler","GridEvents","GridColumnHeaderItem","jsx","_jsx","useGridColumnHeaders","props","innerRef","innerRefProp","minColumnIndex","dragCol","setDragCol","useState","resizeCol","setResizeCol","apiRef","visibleColumns","columnPositions","tabIndexState","cellTabIndexState","columnHeaderFocus","headerHeight","filterColumnLookup","sortColumnLookup","columnMenuState","rootProps","useRef","handleInnerRef","renderContext","setRenderContext","prevRenderContext","prevScrollLeft","useEffect","current","columnHeadersContainerElementRef","scrollLeft","updateInnerPosition","useCallback","nextRenderContext","firstColumnToRender","Math","max","firstColumnIndex","columnBuffer","offset","style","transform","handleScroll","left","_prevRenderContext$cu","_prevRenderContext$cu2","lastColumnIndex","handleColumnResizeStart","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","columnResizeStart","columnResizeStop","columnHeaderDragStart","columnHeaderDragEnd","rowsScroll","getColumns","other","minFirstColumn","maxLastColumn","length","columns","lastColumnToRender","min","renderedColumns","slice","i","column","columnIndex","isFirstColumn","hasTabbableElement","tabIndex","hasFocus","open","push","columnMenuOpen","filterItemsCounter","isDragging","colIndex","isResizing","isLastColumn","extendRowFullWidth","disableExtendRowFullWidth","rootStyle","minHeight","maxHeight","lineHeight","getRootProps","getInnerProps","ref","role"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridColumnHeaders = props => {\n  const {\n    innerRef: innerRefProp,\n    minColumnIndex = 0\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  const rootProps = useGridRootProps();\n  const innerRef = React.useRef(null);\n  const handleInnerRef = useForkRef(innerRefProp, innerRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const prevScrollLeft = React.useRef(0);\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]);\n  const updateInnerPosition = React.useCallback(nextRenderContext => {\n    const firstColumnToRender = Math.max(nextRenderContext.firstColumnIndex - rootProps.columnBuffer, minColumnIndex);\n    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer]);\n  const handleScroll = React.useCallback(({\n    left,\n    renderContext: nextRenderContext = null\n  }) => {\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      setRenderContext(nextRenderContext);\n      prevRenderContext.current = nextRenderContext;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStart, handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStop, handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragEnd, handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, GridEvents.rowsScroll, handleScroll);\n\n  const getColumns = (params, other = {}) => {\n    const {\n      renderContext: nextRenderContext = renderContext,\n      minFirstColumn = minColumnIndex,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    const columns = [];\n    const firstColumnToRender = Math.max(nextRenderContext.firstColumnIndex - rootProps.columnBuffer, minFirstColumn);\n    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const column = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      const open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === columns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), i));\n    }\n\n    return columns;\n  };\n\n  const rootStyle = {\n    minHeight: headerHeight,\n    maxHeight: headerHeight,\n    lineHeight: `${headerHeight}px`\n  };\n  return {\n    renderContext,\n    getColumns,\n    isDragging: !!dragCol,\n    updateInnerPosition,\n    getRootProps: (other = {}) => _extends({\n      style: rootStyle\n    }, other),\n    getInnerProps: () => ({\n      ref: handleInnerRef,\n      'aria-rowindex': 1,\n      role: 'row'\n    })\n  };\n};"]},"metadata":{},"sourceType":"module"}