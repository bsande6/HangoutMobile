{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { isGridCellRoot } from '../../../utils/domUtils';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { useGridStateInit } from '../../utils/useGridStateInit';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent } from '../../../utils/keyboardUtils';\nimport { getCurrentPageRows } from '../../utils/useCurrentPageRows';\n/**\n * @requires useGridRows (state, method)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const propSelectionModel = React.useMemo(() => {\n    if (props.selectionModel == null) {\n      return props.selectionModel;\n    }\n\n    if (Array.isArray(props.selectionModel)) {\n      return props.selectionModel;\n    }\n\n    return [props.selectionModel];\n  }, [props.selectionModel]);\n  useGridStateInit(apiRef, state => _extends({}, state, {\n    selection: propSelectionModel != null ? propSelectionModel : []\n  }));\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: GridEvents.selectionChange\n  });\n  const {\n    checkboxSelection,\n    disableMultipleSelection,\n    disableSelectionOnClick,\n    isRowSelectable,\n    pagination,\n    paginationMode\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  const expandRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setSelectionModel = React.useCallback(model => {\n    const currentModel = gridSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        selection: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const isRowSelected = React.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (isRowSelectable && !isRowSelectable(apiRef.current.getRowParams(id))) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = isRowSelectable ? ids.filter(id => isRowSelectable(apiRef.current.getRowParams(id))) : ids;\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n    const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    const startIndex = visibleRowIds.indexOf(startId);\n    const endIndex = visibleRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = visibleRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionApi = {\n    selectRow,\n    selectRows,\n    selectRowRange,\n    setSelectionModel,\n    getSelectedRows,\n    isRowSelected\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - CTRL is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (disableSelectionOnClick) {\n      return;\n    }\n\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (params.field === '__detail_panel_toggle__') {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (params.field) {\n      const column = apiRef.current.getColumn(params.field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    // TODO replace with !event.currentTarget.contains(event.target as Element)\n    if (!isGridCellRoot(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    const isEditMode = cellParams.cellMode === GridCellModes.Edit;\n\n    if (isEditMode) {\n      return;\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(cellParams.id, event);\n      return;\n    }\n\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows]);\n  useGridApiEventHandler(apiRef, GridEvents.visibleRowsSet, removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, GridEvents.cellClick, handleCellClick);\n  useGridApiEventHandler(apiRef, GridEvents.rowSelectionCheckboxChange, handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, GridEvents.headerSelectionCheckboxChange, handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseDown, preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  const isStateControlled = propSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled) {\n      return;\n    } // isRowSelectable changed\n\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(apiRef.current.getRowParams(id)));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getCurrentPageRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, _ref2) => {\n        let {\n          id\n        } = _ref2;\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(apiRef.current.getRowParams(id));\n        }\n\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/selection/useGridSelection.js"],"names":["_extends","React","GridEvents","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","isGridCellRoot","gridSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridVisibleSortedRowIdsSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","useGridStateInit","GridCellModes","isKeyboardEvent","getCurrentPageRows","useGridSelection","apiRef","props","logger","propSelectionModel","useMemo","selectionModel","Array","isArray","state","selection","lastRowToggled","useRef","current","unstable_updateControlState","stateId","propModel","propOnChange","onSelectionModelChange","stateSelector","changeEvent","selectionChange","checkboxSelection","disableMultipleSelection","disableSelectionOnClick","isRowSelectable","pagination","paginationMode","canHaveMultipleSelection","expandRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setSelectionModel","model","currentModel","debug","setState","forceUpdate","includes","getSelectedRows","selectRow","resetSelection","getRowParams","newSelection","filter","el","push","isSelectionValid","length","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","getRow","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionApi","removeOutdatedSelection","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleCellClick","params","field","column","getColumn","type","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","rowsToBeSelected","handleCellKeyDown","target","cellParams","getCellParams","isEditMode","cellMode","Edit","key","preventDefault","toLowerCase","getAllRowIds","visibleRowsSet","cellClick","rowSelectionCheckboxChange","headerSelectionCheckboxChange","cellMouseDown","cellKeyDown","useEffect","undefined","isStateControlled","rows","currentPageRows","currentPageRowsLookup","reduce","acc","firstSelectableRow","find","isSelectable"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { isGridCellRoot } from '../../../utils/domUtils';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { useGridStateInit } from '../../utils/useGridStateInit';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent } from '../../../utils/keyboardUtils';\nimport { getCurrentPageRows } from '../../utils/useCurrentPageRows';\n/**\n * @requires useGridRows (state, method)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const propSelectionModel = React.useMemo(() => {\n    if (props.selectionModel == null) {\n      return props.selectionModel;\n    }\n\n    if (Array.isArray(props.selectionModel)) {\n      return props.selectionModel;\n    }\n\n    return [props.selectionModel];\n  }, [props.selectionModel]);\n  useGridStateInit(apiRef, state => _extends({}, state, {\n    selection: propSelectionModel != null ? propSelectionModel : []\n  }));\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: GridEvents.selectionChange\n  });\n  const {\n    checkboxSelection,\n    disableMultipleSelection,\n    disableSelectionOnClick,\n    isRowSelectable,\n    pagination,\n    paginationMode\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  const expandRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setSelectionModel = React.useCallback(model => {\n    const currentModel = gridSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        selection: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const isRowSelected = React.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (isRowSelectable && !isRowSelectable(apiRef.current.getRowParams(id))) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = isRowSelectable ? ids.filter(id => isRowSelectable(apiRef.current.getRowParams(id))) : ids;\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n    const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    const startIndex = visibleRowIds.indexOf(startId);\n    const endIndex = visibleRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = visibleRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionApi = {\n    selectRow,\n    selectRows,\n    selectRowRange,\n    setSelectionModel,\n    getSelectedRows,\n    isRowSelected\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - CTRL is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (disableSelectionOnClick) {\n      return;\n    }\n\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (params.field === '__detail_panel_toggle__') {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (params.field) {\n      const column = apiRef.current.getColumn(params.field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    // TODO replace with !event.currentTarget.contains(event.target as Element)\n    if (!isGridCellRoot(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    const isEditMode = cellParams.cellMode === GridCellModes.Edit;\n\n    if (isEditMode) {\n      return;\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(cellParams.id, event);\n      return;\n    }\n\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows]);\n  useGridApiEventHandler(apiRef, GridEvents.visibleRowsSet, removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, GridEvents.cellClick, handleCellClick);\n  useGridApiEventHandler(apiRef, GridEvents.rowSelectionCheckboxChange, handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, GridEvents.headerSelectionCheckboxChange, handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseDown, preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  const isStateControlled = propSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled) {\n      return;\n    } // isRowSelectable changed\n\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(apiRef.current.getRowParams(id)));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getCurrentPageRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, {\n        id\n      }) => {\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(apiRef.current.getRowParams(id));\n        }\n\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};"]},"metadata":{},"sourceType":"module"}