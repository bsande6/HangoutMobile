{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler, useGridSelector } from '../../utils';\nimport { gridPageSizeSelector } from './gridPaginationSelector';\nimport { gridDensityRowHeightSelector } from '../density';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\n\nconst defaultPageSize = autoPageSize => autoPageSize ? 0 : 100;\n\nexport const pageSizeStateInitializer = (state, props) => {\n  var _props$initialState, _props$initialState$p;\n\n  let pageSize;\n\n  if (props.pageSize != null) {\n    pageSize = props.pageSize;\n  } else if (((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null) {\n    pageSize = props.initialState.pagination.pageSize;\n  } else {\n    pageSize = defaultPageSize(props.autoPageSize);\n  }\n\n  return _extends({}, state, {\n    pagination: {\n      pageSize\n    }\n  });\n};\n\nconst mergeStateWithPageSize = pageSize => state => _extends({}, state, {\n  pagination: _extends({}, state.pagination, {\n    pageSize\n  })\n});\n/**\n * @requires useGridDimensions (event) - can be after\n */\n\n\nexport const useGridPageSize = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$;\n\n  const logger = useGridLogger(apiRef, 'useGridPageSize');\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'pageSize',\n    propModel: props.pageSize,\n    propOnChange: props.onPageSizeChange,\n    stateSelector: gridPageSizeSelector,\n    changeEvent: GridEvents.pageSizeChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPageSize = React.useCallback(pageSize => {\n    if (pageSize === gridPageSizeSelector(apiRef)) {\n      return;\n    }\n\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageSizeApi = {\n    setPageSize\n  };\n  useGridApiMethod(apiRef, pageSizeApi, 'GridPageSizeApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState2, _props$initialState2$;\n\n    const pageSizeToExport = gridPageSizeSelector(apiRef);\n    const shouldExportPageSize = // Always export if the page size is controlled\n    props.pageSize != null || // Always export if the page size has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.pageSize) != null || // Export if the page size value is not equal to the default value\n    pageSizeToExport !== defaultPageSize(props.autoPageSize);\n\n    if (!shouldExportPageSize) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        pageSize: pageSizeToExport\n      })\n    });\n  }, [apiRef, props.pageSize, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.pagination) == null ? void 0 : _props$initialState3$.pageSize, props.autoPageSize]);\n  /**\n   * TODO: Add error if `prop.autoHeight = true`\n   */\n\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const pageSize = (_context$stateToResto = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto.pageSize;\n\n    if (pageSize != null) {\n      apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!props.autoPageSize || !dimensions) {\n      return;\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  useGridApiEventHandler(apiRef, GridEvents.viewportInnerSizeChange, handleUpdateAutoPageSize);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.pageSize != null && !props.autoPageSize) {\n      apiRef.current.setPageSize(props.pageSize);\n    }\n  }, [apiRef, props.autoPageSize, props.pageSize]);\n  React.useEffect(() => {\n    handleUpdateAutoPageSize();\n  }, [handleUpdateAutoPageSize]);\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPageSize.js"],"names":["_extends","React","GridEvents","useGridLogger","useGridApiMethod","useGridApiEventHandler","useGridSelector","gridPageSizeSelector","gridDensityRowHeightSelector","useGridRegisterPreProcessor","defaultPageSize","autoPageSize","pageSizeStateInitializer","state","props","_props$initialState","_props$initialState$p","pageSize","initialState","pagination","mergeStateWithPageSize","useGridPageSize","apiRef","_props$initialState3","_props$initialState3$","logger","rowHeight","current","unstable_updateControlState","stateId","propModel","propOnChange","onPageSizeChange","stateSelector","changeEvent","pageSizeChange","setPageSize","useCallback","debug","setState","forceUpdate","pageSizeApi","stateExportPreProcessing","prevState","_props$initialState2","_props$initialState2$","pageSizeToExport","shouldExportPageSize","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","handleUpdateAutoPageSize","dimensions","getRootDimensions","maximumPageSizeWithoutScrollBar","Math","floor","viewportInnerSize","height","viewportInnerSizeChange","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler, useGridSelector } from '../../utils';\nimport { gridPageSizeSelector } from './gridPaginationSelector';\nimport { gridDensityRowHeightSelector } from '../density';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\n\nconst defaultPageSize = autoPageSize => autoPageSize ? 0 : 100;\n\nexport const pageSizeStateInitializer = (state, props) => {\n  var _props$initialState, _props$initialState$p;\n\n  let pageSize;\n\n  if (props.pageSize != null) {\n    pageSize = props.pageSize;\n  } else if (((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null) {\n    pageSize = props.initialState.pagination.pageSize;\n  } else {\n    pageSize = defaultPageSize(props.autoPageSize);\n  }\n\n  return _extends({}, state, {\n    pagination: {\n      pageSize\n    }\n  });\n};\n\nconst mergeStateWithPageSize = pageSize => state => _extends({}, state, {\n  pagination: _extends({}, state.pagination, {\n    pageSize\n  })\n});\n/**\n * @requires useGridDimensions (event) - can be after\n */\n\n\nexport const useGridPageSize = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$;\n\n  const logger = useGridLogger(apiRef, 'useGridPageSize');\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'pageSize',\n    propModel: props.pageSize,\n    propOnChange: props.onPageSizeChange,\n    stateSelector: gridPageSizeSelector,\n    changeEvent: GridEvents.pageSizeChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPageSize = React.useCallback(pageSize => {\n    if (pageSize === gridPageSizeSelector(apiRef)) {\n      return;\n    }\n\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageSizeApi = {\n    setPageSize\n  };\n  useGridApiMethod(apiRef, pageSizeApi, 'GridPageSizeApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState2, _props$initialState2$;\n\n    const pageSizeToExport = gridPageSizeSelector(apiRef);\n    const shouldExportPageSize = // Always export if the page size is controlled\n    props.pageSize != null || // Always export if the page size has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.pageSize) != null || // Export if the page size value is not equal to the default value\n    pageSizeToExport !== defaultPageSize(props.autoPageSize);\n\n    if (!shouldExportPageSize) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        pageSize: pageSizeToExport\n      })\n    });\n  }, [apiRef, props.pageSize, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.pagination) == null ? void 0 : _props$initialState3$.pageSize, props.autoPageSize]);\n  /**\n   * TODO: Add error if `prop.autoHeight = true`\n   */\n\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const pageSize = (_context$stateToResto = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto.pageSize;\n\n    if (pageSize != null) {\n      apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!props.autoPageSize || !dimensions) {\n      return;\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  useGridApiEventHandler(apiRef, GridEvents.viewportInnerSizeChange, handleUpdateAutoPageSize);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.pageSize != null && !props.autoPageSize) {\n      apiRef.current.setPageSize(props.pageSize);\n    }\n  }, [apiRef, props.autoPageSize, props.pageSize]);\n  React.useEffect(() => {\n    handleUpdateAutoPageSize();\n  }, [handleUpdateAutoPageSize]);\n};"]},"metadata":{},"sourceType":"module"}