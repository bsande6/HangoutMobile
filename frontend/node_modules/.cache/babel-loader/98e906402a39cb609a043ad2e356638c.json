{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridStateInit } from '../../utils/useGridStateInit';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\n\nexport const useGridPreferencesPanel = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  useGridStateInit(apiRef, state => {\n    var _props$initialState$p, _props$initialState;\n\n    return _extends({}, state, {\n      preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {\n        open: false\n      }\n    });\n  });\n  const hideTimeout = React.useRef();\n  const immediateTimeout = React.useRef();\n  /**\n   * API METHODS\n   */\n\n  const hidePreferences = React.useCallback(() => {\n    logger.debug('Hiding Preferences Panel');\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: {\n        open: false\n      }\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]); // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n\n  const doNotHidePanel = React.useCallback(() => {\n    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);\n  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n\n  const hidePreferencesDelayed = React.useCallback(() => {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  const showPreferences = React.useCallback(newValue => {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [doNotHidePanel, apiRef, logger]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'ColumnMenuApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n\n    if (!preferencePanelToExport.open && !preferencePanelToExport.openedPanelValue) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js"],"names":["_extends","React","useGridApiMethod","useGridLogger","useGridStateInit","useGridRegisterPreProcessor","gridPreferencePanelStateSelector","useGridPreferencesPanel","apiRef","props","logger","state","_props$initialState$p","_props$initialState","preferencePanel","initialState","open","hideTimeout","useRef","immediateTimeout","hidePreferences","useCallback","debug","current","setState","forceUpdate","doNotHidePanel","setTimeout","clearTimeout","hidePreferencesDelayed","showPreferences","newValue","openedPanelValue","stateExportPreProcessing","prevState","preferencePanelToExport","stateRestorePreProcessing","params","context","stateToRestore","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridStateInit } from '../../utils/useGridStateInit';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\n\nexport const useGridPreferencesPanel = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  useGridStateInit(apiRef, state => {\n    var _props$initialState$p, _props$initialState;\n\n    return _extends({}, state, {\n      preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {\n        open: false\n      }\n    });\n  });\n  const hideTimeout = React.useRef();\n  const immediateTimeout = React.useRef();\n  /**\n   * API METHODS\n   */\n\n  const hidePreferences = React.useCallback(() => {\n    logger.debug('Hiding Preferences Panel');\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: {\n        open: false\n      }\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]); // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n\n  const doNotHidePanel = React.useCallback(() => {\n    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);\n  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n\n  const hidePreferencesDelayed = React.useCallback(() => {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  const showPreferences = React.useCallback(newValue => {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [doNotHidePanel, apiRef, logger]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'ColumnMenuApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n\n    if (!preferencePanelToExport.open && !preferencePanelToExport.openedPanelValue) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};"]},"metadata":{},"sourceType":"module"}