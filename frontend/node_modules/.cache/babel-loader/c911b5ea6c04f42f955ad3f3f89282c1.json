{"ast":null,"code":"import * as React from 'react';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridEvents } from '../../../models/events';\nimport { findParentElementFromClassName } from '../../../utils/domUtils';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\n/**\n * @requires useGridSelection (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridParamsApi (method)\n * @requires useGridColumnMenu (method)\n */\n\nexport const useGridKeyboard = apiRef => {\n  const expandSelection = React.useCallback((params, event) => {\n    apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    const focusCell = gridFocusCellSelector(apiRef);\n\n    if (!focusCell) {\n      return;\n    }\n\n    const rowEl = findParentElementFromClassName(event.target, gridClasses.row);\n    const startRowIndex = Number(rowEl.getAttribute('data-rowindex'));\n    const startId = gridVisibleSortedRowIdsSelector(apiRef)[startRowIndex];\n\n    if (startId === focusCell.id) {\n      return;\n    }\n\n    apiRef.current.selectRowRange({\n      startId,\n      endId: focusCell.id\n    }, !apiRef.current.isRowSelected(focusCell.id));\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    const isEditMode = cellParams.cellMode === GridCellModes.Edit;\n\n    if (isEditMode) {\n      return;\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      // This is a select event, so it's handled by the selection hook\n      return;\n    }\n\n    if (isNavigationKey(event.key) && !event.shiftKey) {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, cellParams, event);\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      event.preventDefault();\n      expandSelection(cellParams, event);\n    }\n  }, [apiRef, expandSelection]);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n};","map":{"version":3,"sources":["/Users/kenleyshaw 1/Desktop/school/visual studio/HangoutApp/frontend/node_modules/@mui/x-data-grid/hooks/features/keyboard/useGridKeyboard.js"],"names":["React","gridClasses","GridEvents","findParentElementFromClassName","isNavigationKey","useGridApiEventHandler","GridCellModes","gridVisibleSortedRowIdsSelector","gridFocusCellSelector","useGridKeyboard","apiRef","expandSelection","useCallback","params","event","current","publishEvent","cellNavigationKeyDown","focusCell","rowEl","target","row","startRowIndex","Number","getAttribute","startId","id","selectRowRange","endId","isRowSelected","handleCellKeyDown","currentTarget","contains","cellParams","getCellParams","field","isEditMode","cellMode","Edit","key","shiftKey","preventDefault","cellKeyDown"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridEvents } from '../../../models/events';\nimport { findParentElementFromClassName } from '../../../utils/domUtils';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\n/**\n * @requires useGridSelection (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridParamsApi (method)\n * @requires useGridColumnMenu (method)\n */\n\nexport const useGridKeyboard = apiRef => {\n  const expandSelection = React.useCallback((params, event) => {\n    apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    const focusCell = gridFocusCellSelector(apiRef);\n\n    if (!focusCell) {\n      return;\n    }\n\n    const rowEl = findParentElementFromClassName(event.target, gridClasses.row);\n    const startRowIndex = Number(rowEl.getAttribute('data-rowindex'));\n    const startId = gridVisibleSortedRowIdsSelector(apiRef)[startRowIndex];\n\n    if (startId === focusCell.id) {\n      return;\n    }\n\n    apiRef.current.selectRowRange({\n      startId,\n      endId: focusCell.id\n    }, !apiRef.current.isRowSelected(focusCell.id));\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    const isEditMode = cellParams.cellMode === GridCellModes.Edit;\n\n    if (isEditMode) {\n      return;\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      // This is a select event, so it's handled by the selection hook\n      return;\n    }\n\n    if (isNavigationKey(event.key) && !event.shiftKey) {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, cellParams, event);\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      event.preventDefault();\n      expandSelection(cellParams, event);\n    }\n  }, [apiRef, expandSelection]);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n};"]},"metadata":{},"sourceType":"module"}