import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toPropertyKey from "@babel/runtime/helpers/esm/toPropertyKey";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { useGridApiMethod } from '../../utils/useGridApiMethod';
import { GridEvents } from '../../../models/events';
export var useGridPreProcessing = function useGridPreProcessing(apiRef) {
  var preProcessorsRef = React.useRef({});
  var registerPreProcessor = React.useCallback(function (group, id, callback) {
    if (!preProcessorsRef.current[group]) {
      preProcessorsRef.current[group] = {};
    }

    var preProcessors = preProcessorsRef.current[group];
    var oldCallback = preProcessors[id];

    if (!oldCallback || oldCallback !== callback) {
      preProcessorsRef.current[group] = _extends({}, preProcessors, _defineProperty({}, id, callback));
      apiRef.current.publishEvent(GridEvents.preProcessorRegister, group);
    }

    return function () {
      var _ref = preProcessorsRef.current[group],
          removedPreProcessor = _ref[id],
          otherProcessors = _objectWithoutProperties(_ref, [id].map(_toPropertyKey));

      preProcessorsRef.current[group] = otherProcessors;
      apiRef.current.publishEvent(GridEvents.preProcessorUnregister, group);
    };
  }, [apiRef]);
  var applyPreProcessors = React.useCallback(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _ref2 = args,
        _ref3 = _slicedToArray(_ref2, 3),
        group = _ref3[0],
        value = _ref3[1],
        params = _ref3[2];

    if (!preProcessorsRef.current[group]) {
      return value;
    }

    var preProcessors = Object.values(preProcessorsRef.current[group]);
    return preProcessors.reduce(function (acc, preProcessor) {
      return preProcessor(acc, params);
    }, value);
  }, []);
  var preProcessingApi = {
    unstable_registerPreProcessor: registerPreProcessor,
    unstable_applyPreProcessors: applyPreProcessors
  };
  useGridApiMethod(apiRef, preProcessingApi, 'GridPreProcessing');
};