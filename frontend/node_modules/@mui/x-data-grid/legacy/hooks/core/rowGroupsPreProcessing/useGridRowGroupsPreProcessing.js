import * as React from 'react';
import { GridEvents } from '../../../models/events';
import { useGridApiMethod } from '../../utils/useGridApiMethod';

var getFlatRowTree = function getFlatRowTree(_ref) {
  var ids = _ref.ids,
      idRowsLookup = _ref.idRowsLookup,
      previousTree = _ref.previousTree;
  var tree = {};

  for (var i = 0; i < ids.length; i += 1) {
    var rowId = ids[i];

    if (previousTree && previousTree[rowId]) {
      tree[rowId] = previousTree[rowId];
    } else {
      tree[rowId] = {
        id: rowId,
        depth: 0,
        parent: null,
        groupingKey: '',
        groupingField: null
      };
    }
  }

  return {
    groupingName: 'none',
    tree: tree,
    treeDepth: 1,
    idRowsLookup: idRowsLookup,
    ids: ids
  };
};

export var useGridRowGroupsPreProcessing = function useGridRowGroupsPreProcessing(apiRef) {
  var rowGroupsPreProcessingRef = React.useRef(new Map());
  var registerRowGroupsBuilder = React.useCallback(function (processingName, rowGroupingPreProcessing) {
    var _rowGroupsPreProcessi;

    var rowGroupingPreProcessingBefore = (_rowGroupsPreProcessi = rowGroupsPreProcessingRef.current.get(processingName)) != null ? _rowGroupsPreProcessi : null;

    if (rowGroupingPreProcessingBefore !== rowGroupingPreProcessing) {
      rowGroupsPreProcessingRef.current.set(processingName, rowGroupingPreProcessing);
      apiRef.current.publishEvent(GridEvents.rowGroupsPreProcessingChange);
    }
  }, [apiRef]);
  var groupRows = React.useCallback(function () {
    var response = null;
    var preProcessingList = Array.from(rowGroupsPreProcessingRef.current.values());

    while (!response && preProcessingList.length) {
      var preProcessing = preProcessingList.shift();

      if (preProcessing) {
        response = preProcessing.apply(void 0, arguments);
      }
    }

    if (!response) {
      return getFlatRowTree.apply(void 0, arguments);
    }

    return response;
  }, []);
  var rowGroupsPreProcessingApi = {
    unstable_registerRowGroupsBuilder: registerRowGroupsBuilder,
    unstable_groupRows: groupRows
  };
  useGridApiMethod(apiRef, rowGroupsPreProcessingApi, 'GridRowGroupsPreProcessing');
};