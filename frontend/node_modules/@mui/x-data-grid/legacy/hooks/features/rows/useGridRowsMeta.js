import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { getCurrentPageRows } from '../../utils/useCurrentPageRows';
import { useGridApiMethod } from '../../utils/useGridApiMethod';
import { useGridSelector } from '../../utils/useGridSelector';
import { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';
import { gridFilterStateSelector } from '../filter/gridFilterSelector';
import { gridPaginationSelector } from '../pagination/gridPaginationSelector';
import { gridSortingStateSelector } from '../sorting/gridSortingSelector';
import { useGridStateInit } from '../../utils/useGridStateInit';
import { GridEvents } from '../../../models/events/gridEvents';
import { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';
/**
 * @requires useGridPageSize (method)
 * @requires useGridPage (method)
 */

export var useGridRowsMeta = function useGridRowsMeta(apiRef, props) {
  var getRowHeight = props.getRowHeight,
      pagination = props.pagination,
      paginationMode = props.paginationMode;
  var rowsHeightLookup = React.useRef({});
  var rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);
  var filterState = useGridSelector(apiRef, gridFilterStateSelector);
  var paginationState = useGridSelector(apiRef, gridPaginationSelector);
  var sortingState = useGridSelector(apiRef, gridSortingStateSelector);
  useGridStateInit(apiRef, function (state) {
    return _extends({}, state, {
      rowsMeta: {
        currentPageTotalHeight: 0,
        positions: []
      }
    });
  });
  var hydrateRowsMeta = React.useCallback(function () {
    var _getCurrentPageRows = getCurrentPageRows(apiRef, {
      pagination: pagination,
      paginationMode: paginationMode
    }),
        rows = _getCurrentPageRows.rows;

    apiRef.current.setState(function (state) {
      var positions = [];
      var densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);
      var currentRowHeight = gridDensityRowHeightSelector(state, apiRef.current.instanceId);
      var currentPageTotalHeight = rows.reduce(function (acc, row) {
        positions.push(acc);
        var baseRowHeight;
        var isResized = rowsHeightLookup.current[row.id] && rowsHeightLookup.current[row.id].isResized || false;

        if (isResized) {
          // do not recalculate resized row height and use the value from the lookup
          baseRowHeight = rowsHeightLookup.current[row.id].value;
        } else {
          baseRowHeight = currentRowHeight;

          if (getRowHeight) {
            var _getRowHeight;

            // Default back to base rowHeight if getRowHeight returns null or undefined.
            baseRowHeight = (_getRowHeight = getRowHeight(_extends({}, row, {
              densityFactor: densityFactor
            }))) != null ? _getRowHeight : currentRowHeight;
          }
        }

        var heights = apiRef.current.unstable_applyPreProcessors('rowHeight', {
          base: baseRowHeight
        }, // We use an object to make simple to check if a size was already added or not
        row);
        var finalRowHeight = Object.values(heights).reduce(function (acc2, value) {
          return acc2 + value;
        }, 0);
        rowsHeightLookup.current[row.id] = {
          value: baseRowHeight,
          isResized: isResized
        };
        return acc + finalRowHeight;
      }, 0);
      return _extends({}, state, {
        rowsMeta: {
          currentPageTotalHeight: currentPageTotalHeight,
          positions: positions
        }
      });
    });
    apiRef.current.forceUpdate();
  }, [apiRef, pagination, paginationMode, getRowHeight]);

  var getTargetRowHeight = function getTargetRowHeight(rowId) {
    var _rowsHeightLookup$cur;

    return ((_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.value) || rowHeight;
  };

  var setRowHeight = React.useCallback(function (id, height) {
    rowsHeightLookup.current[id] = {
      value: height,
      isResized: true
    };
    hydrateRowsMeta();
  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.
  // Because of variable row height this is needed for the virtualization

  React.useEffect(function () {
    hydrateRowsMeta();
  }, [rowHeight, filterState, paginationState, sortingState, hydrateRowsMeta]);
  var handlePreProcessorRegister = React.useCallback(function (name) {
    if (name !== 'rowHeight') {
      return;
    }

    hydrateRowsMeta();
  }, [hydrateRowsMeta]);
  useGridApiEventHandler(apiRef, GridEvents.preProcessorRegister, handlePreProcessorRegister);
  var rowsMetaApi = {
    unstable_getRowHeight: getTargetRowHeight,
    unstable_setRowHeight: setRowHeight
  };
  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');
};