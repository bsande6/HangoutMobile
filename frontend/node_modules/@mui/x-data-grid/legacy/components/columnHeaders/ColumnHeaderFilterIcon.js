import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { unstable_composeClasses as composeClasses } from '@mui/material';
import IconButton from '@mui/material/IconButton';
import Badge from '@mui/material/Badge';
import { gridPreferencePanelStateSelector } from '../../hooks/features/preferencesPanel/gridPreferencePanelSelector';
import { GridPreferencePanelsValue } from '../../hooks/features/preferencesPanel/gridPreferencePanelsValue';
import { useGridApiContext } from '../../hooks/utils/useGridApiContext';
import { getDataGridUtilityClass } from '../../constants/gridClasses';
import { useGridRootProps } from '../../hooks/utils/useGridRootProps';
import { GridIconButtonContainer } from './GridIconButtonContainer';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var useUtilityClasses = function useUtilityClasses(ownerState) {
  var classes = ownerState.classes;
  var slots = {
    icon: ['filterIcon']
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};

export function ColumnHeaderFilterIcon(props) {
  var _rootProps$components;

  var counter = props.counter;
  var apiRef = useGridApiContext();
  var rootProps = useGridRootProps();

  var ownerState = _extends({}, props, {
    classes: rootProps.classes
  });

  var classes = useUtilityClasses(ownerState);
  var toggleFilter = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();

    var _gridPreferencePanelS = gridPreferencePanelStateSelector(apiRef.current.state),
        open = _gridPreferencePanelS.open,
        openedPanelValue = _gridPreferencePanelS.openedPanelValue;

    if (open && openedPanelValue === GridPreferencePanelsValue.filters) {
      apiRef.current.hideFilterPanel();
    } else {
      apiRef.current.showFilterPanel();
    }
  }, [apiRef]);

  if (!counter) {
    return null;
  }

  var iconButton = /*#__PURE__*/_jsx(IconButton, {
    onClick: toggleFilter,
    color: "default",
    "aria-label": apiRef.current.getLocaleText('columnHeaderFiltersLabel'),
    size: "small",
    tabIndex: -1,
    children: /*#__PURE__*/_jsx(rootProps.components.ColumnFilteredIcon, {
      className: classes.icon,
      fontSize: "small"
    })
  });

  return /*#__PURE__*/_jsx(rootProps.components.BaseTooltip, _extends({
    title: apiRef.current.getLocaleText('columnHeaderFiltersTooltipActive')(counter),
    enterDelay: 1000
  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTooltip, {
    children: /*#__PURE__*/_jsxs(GridIconButtonContainer, {
      children: [counter > 1 && /*#__PURE__*/_jsx(Badge, {
        badgeContent: counter,
        color: "default",
        children: iconButton
      }), counter === 1 && iconButton]
    })
  }));
}