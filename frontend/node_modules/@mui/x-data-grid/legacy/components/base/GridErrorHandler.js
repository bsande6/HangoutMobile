import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { styled } from '@mui/material/styles';
import { useGridApiContext } from '../../hooks/utils/useGridApiContext';
import { useGridLogger } from '../../hooks/utils/useGridLogger';
import { GridMainContainer } from '../containers/GridMainContainer';
import { ErrorBoundary } from '../ErrorBoundary';
import { useGridRootProps } from '../../hooks/utils/useGridRootProps';
import { GridAutoSizer } from '../GridAutoSizer';
import { GridEvents } from '../../models/events/gridEvents';
import { jsx as _jsx } from "react/jsx-runtime";
var ErrorOverlayWrapper = styled('div')({
  position: 'absolute',
  top: 0,
  width: '100%',
  height: '100%'
});
export function GridErrorHandler(props) {
  var children = props.children;
  var apiRef = useGridApiContext();
  var logger = useGridLogger(apiRef, 'GridErrorHandler');
  var rootProps = useGridRootProps();
  var error = apiRef.current.state.error;
  var handleResize = React.useCallback(function (size) {
    apiRef.current.publishEvent(GridEvents.resize, size);
  }, [apiRef]);
  return /*#__PURE__*/_jsx(ErrorBoundary, {
    hasError: error != null,
    componentProps: error,
    api: apiRef,
    logger: logger,
    render: function render(errorProps) {
      return /*#__PURE__*/_jsx(GridMainContainer, {
        children: /*#__PURE__*/_jsx(GridAutoSizer, {
          nonce: rootProps.nonce,
          disableHeight: rootProps.autoHeight,
          onResize: handleResize,
          children: function children() {
            var _rootProps$components;

            return /*#__PURE__*/_jsx(ErrorOverlayWrapper, {
              children: /*#__PURE__*/_jsx(rootProps.components.ErrorOverlay, _extends({}, errorProps, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.errorOverlay))
            });
          }
        })
      });
    },
    children: children
  });
}