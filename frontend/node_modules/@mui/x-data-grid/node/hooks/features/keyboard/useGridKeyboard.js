"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGridKeyboard = void 0;

var React = _interopRequireWildcard(require("react"));

var _gridClasses = require("../../../constants/gridClasses");

var _events = require("../../../models/events");

var _domUtils = require("../../../utils/domUtils");

var _keyboardUtils = require("../../../utils/keyboardUtils");

var _useGridApiEventHandler = require("../../utils/useGridApiEventHandler");

var _gridEditRowModel = require("../../../models/gridEditRowModel");

var _gridFilterSelector = require("../filter/gridFilterSelector");

var _gridFocusStateSelector = require("../focus/gridFocusStateSelector");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @requires useGridSelection (method)
 * @requires useGridRows (method)
 * @requires useGridFocus (state)
 * @requires useGridParamsApi (method)
 * @requires useGridColumnMenu (method)
 */
const useGridKeyboard = apiRef => {
  const expandSelection = React.useCallback((params, event) => {
    apiRef.current.publishEvent(_events.GridEvents.cellNavigationKeyDown, params, event);
    const focusCell = (0, _gridFocusStateSelector.gridFocusCellSelector)(apiRef);

    if (!focusCell) {
      return;
    }

    const rowEl = (0, _domUtils.findParentElementFromClassName)(event.target, _gridClasses.gridClasses.row);
    const startRowIndex = Number(rowEl.getAttribute('data-rowindex'));
    const startId = (0, _gridFilterSelector.gridVisibleSortedRowIdsSelector)(apiRef)[startRowIndex];

    if (startId === focusCell.id) {
      return;
    }

    apiRef.current.selectRowRange({
      startId,
      endId: focusCell.id
    }, !apiRef.current.isRowSelected(focusCell.id));
  }, [apiRef]);
  const handleCellKeyDown = React.useCallback((params, event) => {
    // Ignore portal
    if (!event.currentTarget.contains(event.target)) {
      return;
    } // Get the most recent params because the cell mode may have changed by another listener


    const cellParams = apiRef.current.getCellParams(params.id, params.field);
    const isEditMode = cellParams.cellMode === _gridEditRowModel.GridCellModes.Edit;

    if (isEditMode) {
      return;
    }

    if (event.key === ' ' && event.shiftKey) {
      // This is a select event, so it's handled by the selection hook
      return;
    }

    if ((0, _keyboardUtils.isNavigationKey)(event.key) && !event.shiftKey) {
      apiRef.current.publishEvent(_events.GridEvents.cellNavigationKeyDown, cellParams, event);
      return;
    }

    if ((0, _keyboardUtils.isNavigationKey)(event.key) && event.shiftKey) {
      event.preventDefault();
      expandSelection(cellParams, event);
    }
  }, [apiRef, expandSelection]);
  (0, _useGridApiEventHandler.useGridApiEventHandler)(apiRef, _events.GridEvents.cellKeyDown, handleCellKeyDown);
};

exports.useGridKeyboard = useGridKeyboard;