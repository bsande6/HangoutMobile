"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGridPreProcessing = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _toPropertyKey2 = _interopRequireDefault(require("@babel/runtime/helpers/toPropertyKey"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _useGridApiMethod = require("../../utils/useGridApiMethod");

var _events = require("../../../models/events");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const useGridPreProcessing = apiRef => {
  const preProcessorsRef = React.useRef({});
  const registerPreProcessor = React.useCallback((group, id, callback) => {
    if (!preProcessorsRef.current[group]) {
      preProcessorsRef.current[group] = {};
    }

    const preProcessors = preProcessorsRef.current[group];
    const oldCallback = preProcessors[id];

    if (!oldCallback || oldCallback !== callback) {
      preProcessorsRef.current[group] = (0, _extends2.default)({}, preProcessors, {
        [id]: callback
      });
      apiRef.current.publishEvent(_events.GridEvents.preProcessorRegister, group);
    }

    return () => {
      const _ref = preProcessorsRef.current[group],
            otherProcessors = (0, _objectWithoutPropertiesLoose2.default)(_ref, [id].map(_toPropertyKey2.default));
      preProcessorsRef.current[group] = otherProcessors;
      apiRef.current.publishEvent(_events.GridEvents.preProcessorUnregister, group);
    };
  }, [apiRef]);
  const applyPreProcessors = React.useCallback((...args) => {
    const [group, value, params] = args;

    if (!preProcessorsRef.current[group]) {
      return value;
    }

    const preProcessors = Object.values(preProcessorsRef.current[group]);
    return preProcessors.reduce((acc, preProcessor) => {
      return preProcessor(acc, params);
    }, value);
  }, []);
  const preProcessingApi = {
    unstable_registerPreProcessor: registerPreProcessor,
    unstable_applyPreProcessors: applyPreProcessors
  };
  (0, _useGridApiMethod.useGridApiMethod)(apiRef, preProcessingApi, 'GridPreProcessing');
};

exports.useGridPreProcessing = useGridPreProcessing;