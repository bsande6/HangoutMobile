"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGridRowGroupsPreProcessing = void 0;

var React = _interopRequireWildcard(require("react"));

var _events = require("../../../models/events");

var _useGridApiMethod = require("../../utils/useGridApiMethod");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getFlatRowTree = ({
  ids,
  idRowsLookup,
  previousTree
}) => {
  const tree = {};

  for (let i = 0; i < ids.length; i += 1) {
    const rowId = ids[i];

    if (previousTree && previousTree[rowId]) {
      tree[rowId] = previousTree[rowId];
    } else {
      tree[rowId] = {
        id: rowId,
        depth: 0,
        parent: null,
        groupingKey: '',
        groupingField: null
      };
    }
  }

  return {
    groupingName: 'none',
    tree,
    treeDepth: 1,
    idRowsLookup,
    ids
  };
};

const useGridRowGroupsPreProcessing = apiRef => {
  const rowGroupsPreProcessingRef = React.useRef(new Map());
  const registerRowGroupsBuilder = React.useCallback((processingName, rowGroupingPreProcessing) => {
    var _rowGroupsPreProcessi;

    const rowGroupingPreProcessingBefore = (_rowGroupsPreProcessi = rowGroupsPreProcessingRef.current.get(processingName)) != null ? _rowGroupsPreProcessi : null;

    if (rowGroupingPreProcessingBefore !== rowGroupingPreProcessing) {
      rowGroupsPreProcessingRef.current.set(processingName, rowGroupingPreProcessing);
      apiRef.current.publishEvent(_events.GridEvents.rowGroupsPreProcessingChange);
    }
  }, [apiRef]);
  const groupRows = React.useCallback((...params) => {
    let response = null;
    const preProcessingList = Array.from(rowGroupsPreProcessingRef.current.values());

    while (!response && preProcessingList.length) {
      const preProcessing = preProcessingList.shift();

      if (preProcessing) {
        response = preProcessing(...params);
      }
    }

    if (!response) {
      return getFlatRowTree(...params);
    }

    return response;
  }, []);
  const rowGroupsPreProcessingApi = {
    unstable_registerRowGroupsBuilder: registerRowGroupsBuilder,
    unstable_groupRows: groupRows
  };
  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowGroupsPreProcessingApi, 'GridRowGroupsPreProcessing');
};

exports.useGridRowGroupsPreProcessing = useGridRowGroupsPreProcessing;