"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clamp = void 0;
exports.escapeRegExp = escapeRegExp;
Object.defineProperty(exports, "isDeepEqual", {
  enumerable: true,
  get: function () {
    return _isDeepEqual.default;
  }
});
exports.isFunction = isFunction;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.localStorageAvailable = localStorageAvailable;

var _isDeepEqual = _interopRequireDefault(require("../lib/lodash/isDeepEqual"));

function isNumber(value) {
  return typeof value === 'number';
}

function isFunction(value) {
  return typeof value === 'function';
}

function isObject(value) {
  return typeof value === 'object';
}

function localStorageAvailable() {
  try {
    // Incognito mode might reject access to the localStorage for security reasons.
    // window isn't defined on Node.js
    // https://stackoverflow.com/questions/16427636/check-if-localstorage-is-available
    const key = '__some_random_key_you_are_not_going_to_use__';
    window.localStorage.setItem(key, key);
    window.localStorage.removeItem(key);
    return true;
  } catch (err) {
    return false;
  }
}

function escapeRegExp(value) {
  return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
}
/**
 * Follows the CSS specification behavior for min and max
 * If min > max, then the min have priority
 */


const clamp = (value, min, max) => Math.max(min, Math.min(max, value));

exports.clamp = clamp;