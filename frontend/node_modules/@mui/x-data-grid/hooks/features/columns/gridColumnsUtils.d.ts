import * as React from 'react';
import { GridColumnsState, GridColumnsRawState, GridColumnVisibilityModel } from './gridColumnsInterfaces';
import { GridColType, GridColumnTypesRecord } from '../../../models';
import { GridStateCommunity } from '../../../models/gridStateCommunity';
import { GridApiCommunity } from '../../../models/api/gridApiCommunity';
import { GridColDef } from '../../../models/colDef/gridColDef';
export declare const computeColumnTypes: (customColumnTypes?: GridColumnTypesRecord) => GridColumnTypesRecord;
/**
 * Computes width for flex columns.
 * Based on CSS Flexbox specification:
 * https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths
 */
export declare function computeFlexColumnsWidth({ initialFreeSpace, totalFlexUnits, flexColumns, }: {
    initialFreeSpace: number;
    totalFlexUnits: number;
    flexColumns: {
        field: GridColDef['field'];
        flex?: number;
        minWidth?: number;
        maxWidth?: number;
    }[];
}): Record<string, {
    flex: number;
    computedWidth: number;
    frozen: boolean;
}>;
/**
 * Compute the `computedWidth` (ie: the width the column should have during rendering) based on the `width` / `flex` / `minWidth` / `maxWidth` properties of `GridColDef`.
 * The columns already have been merged with there `type` default values for `minWidth`, `maxWidth` and `width`, thus the `!` for those properties below.
 * TODO: Unit test this function in depth and only keep basic cases for the whole grid testing.
 * TODO: Improve the `GridColDef` typing to reflect the fact that `minWidth` / `maxWidth` and `width` can't be null after the merge with the `type` default values.
 */
export declare const hydrateColumnsWidth: (rawState: GridColumnsRawState, viewportInnerWidth: number) => GridColumnsState;
/**
 * @deprecated Should have been internal only, you can inline the logic.
 */
export declare const getGridColDef: (columnTypes: GridColumnTypesRecord, type: GridColType | undefined) => import("../../../models").GridColTypeDef;
export declare const createColumnsState: ({ apiRef, columnsToUpsert, columnsTypes, currentColumnVisibilityModel, shouldRegenColumnVisibilityModelFromColumns, reset, }: {
    columnsToUpsert: GridColDef[];
    columnsTypes: GridColumnTypesRecord;
    currentColumnVisibilityModel?: GridColumnVisibilityModel | undefined;
    shouldRegenColumnVisibilityModelFromColumns: boolean;
    apiRef: React.MutableRefObject<GridApiCommunity>;
    reset: boolean;
}) => GridColumnsState;
export declare const setColumnsState: (columnsState: GridColumnsState) => (state: GridStateCommunity) => GridStateCommunity;
