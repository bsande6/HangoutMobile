import * as React from 'react';
import { GridEvents } from '../../../models/events';
import { useGridApiMethod } from '../../utils/useGridApiMethod';

const getFlatRowTree = ({
  ids,
  idRowsLookup,
  previousTree
}) => {
  const tree = {};

  for (let i = 0; i < ids.length; i += 1) {
    const rowId = ids[i];

    if (previousTree && previousTree[rowId]) {
      tree[rowId] = previousTree[rowId];
    } else {
      tree[rowId] = {
        id: rowId,
        depth: 0,
        parent: null,
        groupingKey: '',
        groupingField: null
      };
    }
  }

  return {
    groupingName: 'none',
    tree,
    treeDepth: 1,
    idRowsLookup,
    ids
  };
};

export const useGridRowGroupsPreProcessing = apiRef => {
  const rowGroupsPreProcessingRef = React.useRef(new Map());
  const registerRowGroupsBuilder = React.useCallback((processingName, rowGroupingPreProcessing) => {
    const rowGroupingPreProcessingBefore = rowGroupsPreProcessingRef.current.get(processingName) ?? null;

    if (rowGroupingPreProcessingBefore !== rowGroupingPreProcessing) {
      rowGroupsPreProcessingRef.current.set(processingName, rowGroupingPreProcessing);
      apiRef.current.publishEvent(GridEvents.rowGroupsPreProcessingChange);
    }
  }, [apiRef]);
  const groupRows = React.useCallback((...params) => {
    let response = null;
    const preProcessingList = Array.from(rowGroupsPreProcessingRef.current.values());

    while (!response && preProcessingList.length) {
      const preProcessing = preProcessingList.shift();

      if (preProcessing) {
        response = preProcessing(...params);
      }
    }

    if (!response) {
      return getFlatRowTree(...params);
    }

    return response;
  }, []);
  const rowGroupsPreProcessingApi = {
    unstable_registerRowGroupsBuilder: registerRowGroupsBuilder,
    unstable_groupRows: groupRows
  };
  useGridApiMethod(apiRef, rowGroupsPreProcessingApi, 'GridRowGroupsPreProcessing');
};