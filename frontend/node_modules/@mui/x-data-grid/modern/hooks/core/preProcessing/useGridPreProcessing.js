import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _toPropertyKey from "@babel/runtime/helpers/esm/toPropertyKey";
import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { useGridApiMethod } from '../../utils/useGridApiMethod';
import { GridEvents } from '../../../models/events';
export const useGridPreProcessing = apiRef => {
  const preProcessorsRef = React.useRef({});
  const registerPreProcessor = React.useCallback((group, id, callback) => {
    if (!preProcessorsRef.current[group]) {
      preProcessorsRef.current[group] = {};
    }

    const preProcessors = preProcessorsRef.current[group];
    const oldCallback = preProcessors[id];

    if (!oldCallback || oldCallback !== callback) {
      preProcessorsRef.current[group] = _extends({}, preProcessors, {
        [id]: callback
      });
      apiRef.current.publishEvent(GridEvents.preProcessorRegister, group);
    }

    return () => {
      const _ref = preProcessorsRef.current[group],
            otherProcessors = _objectWithoutPropertiesLoose(_ref, [id].map(_toPropertyKey));

      preProcessorsRef.current[group] = otherProcessors;
      apiRef.current.publishEvent(GridEvents.preProcessorUnregister, group);
    };
  }, [apiRef]);
  const applyPreProcessors = React.useCallback((...args) => {
    const [group, value, params] = args;

    if (!preProcessorsRef.current[group]) {
      return value;
    }

    const preProcessors = Object.values(preProcessorsRef.current[group]);
    return preProcessors.reduce((acc, preProcessor) => {
      return preProcessor(acc, params);
    }, value);
  }, []);
  const preProcessingApi = {
    unstable_registerPreProcessor: registerPreProcessor,
    unstable_applyPreProcessors: applyPreProcessors
  };
  useGridApiMethod(apiRef, preProcessingApi, 'GridPreProcessing');
};